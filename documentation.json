{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICustomer",
            "id": "interface-ICustomer-80b868c90a96f2a86eedab908ec702ce3a9a4042a453e9d886552e54990bcf245725c2c79f2aabad3ffa79a1b3d54ede9c71284f67aa5abf7e2fb5806ab72115",
            "file": "src/app/pages/customer/models/interfaces/customer.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICustomer {\n  birthDate: string;\n  cpf: string;\n  createdAt: Date;\n  email: string;\n  id: number;\n  monthlyIncome: number;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "monthlyIncome",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IForm",
            "id": "interface-IForm-9ef83acd0b99436ed5d9bc741e1fdf82726fbe917ecfade53296dbbb90f236ca2a8fa818a5996beee3cde7308ff47068e1d2c74f82b3ad771eec1fb4b7e2765b",
            "file": "src/app/interfaces/form.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IForm {\n  onSubmit(): void;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "IInput",
            "id": "interface-IInput-8df8d676e829787dfd6801a72cc209fdd7494b6d545eb298d837da99acb83afeb254048aac75feb44735e8ed1a52c5bd7f3caeb26a42fe48fd65f06099596514",
            "file": "src/app/components/input/input.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InputType } from './input.type';\n\nexport interface IInput {\n  id: string;\n  errorMessage: string;\n  hasError: boolean;\n  isReadOnly: boolean;\n  label: string;\n  placeholder: string;\n  type: InputType;\n}\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isReadOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputType",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CustomerService",
            "id": "injectable-CustomerService-3e1b13b55a318eb7474bc86b129b7c03bcb77d9d62adfbcbe2ce2f6f3ca9110169e74c4d40f373fa1494375ca8e3b1f1c5f5d5fbf1c7a78ddd415befe6da95fa",
            "file": "src/app/pages/customer/customer.service.ts",
            "properties": [
                {
                    "name": "#apiPath",
                    "defaultValue": "`${environment.baseUrl}/custormer`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "#dataForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomerDataForm",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "submit$",
                    "defaultValue": "new Subject<CustomerDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICustomer>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigatTo",
                    "args": [
                        {
                            "name": "params",
                            "type": "(string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "(string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICustomer>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onUpdateSubmit",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICustomer>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDataForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "CustomerDataForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CustomerDataForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, Subject, from, switchMap } from 'rxjs';\nimport { HttpService } from 'src/app/services/http.service';\nimport { environment } from 'src/environments/environment.prod';\nimport { CustomerDataForm } from './models/customer.data-form';\nimport { CustomerDto } from './models/customer.dto';\nimport { ICustomer } from './models/interfaces/customer.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerService {\n  #dataForm!: CustomerDataForm;\n\n  readonly #apiPath = `${environment.baseUrl}/custormer`;\n  readonly submit$ = new Subject<CustomerDto>();\n\n  constructor(\n    private readonly _httpServer: HttpService,\n    private readonly _router: Router,\n  ) {}\n\n  get dataForm() {\n    return this.#dataForm;\n  }\n\n  public getById(id: number | string): Observable<ICustomer> {\n    return this._httpServer.getById(this.#apiPath, id);\n  }\n\n  public onCreateSubmit(): Observable<ICustomer> {\n    return this.submit$.pipe(\n      switchMap((dto) =>\n        this._httpServer.create<ICustomer>(this.#apiPath, dto),\n      ),\n    );\n  }\n\n  public setDataForm(data: CustomerDataForm): void {\n    this.#dataForm = data;\n  }\n\n  public onUpdateSubmit(id: number): Observable<ICustomer> {\n    return this.submit$.pipe(\n      switchMap((dto) =>\n        this._httpServer.update<ICustomer>(this.#apiPath, id, dto),\n      ),\n    );\n  }\n\n  public navigatTo(...params: (string | number)[]): Observable<boolean> {\n    const url = this._router.url.replace(/\\/[^/]*$/, '');\n    return from(this._router.navigate([url, ...params]));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpServer",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_httpServer",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "dataForm": {
                    "name": "dataForm",
                    "getSignature": {
                        "name": "dataForm",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-a745d459e4d5da40cdc251289115e83e0408dd4e0a51f0cdf35545cbee7e130c0791503dc1f07d089418a08c8ba4b056cadc53a644c071e58c557d3a5fed372a",
            "file": "src/app/services/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkFormValidations",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'any',\n})\nexport class FormService {\n  public onSubmit(form: FormGroup | FormArray, cb: () => void) {\n    if (form.valid) {\n      cb();\n    } else {\n      this.checkFormValidations(form);\n    }\n  }\n\n  private checkFormValidations(form: FormGroup | FormArray) {\n    Object.keys(form.controls).forEach((field) => {\n      const control = form.get(field) as AbstractControl;\n      control.markAsDirty();\n      control.markAsTouched();\n      const status = control.status;\n      (control.statusChanges as EventEmitter<string>).emit('CHECK_COMPONENT');\n      (control.statusChanges as EventEmitter<string>).emit(status);\n      if (control instanceof FormGroup || control instanceof FormArray) {\n        this.checkFormValidations(control);\n      }\n    });\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-936d9c381b2f1c18e4aed80da9f668f95f6490cfdde65063b51ff73d04d937bb491b731403d812feebcac65ded2e535d9b06179e5b05d72b4185d2adafa6aabe",
            "file": "src/app/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T",
                        "DTO"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T",
                        "DTO"
                    ],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, take } from 'rxjs';\n\n@Injectable({\n  providedIn: 'any',\n})\nexport class HttpService {\n  constructor(private readonly _http: HttpClient) {}\n\n  private get options(): {\n    headers?: HttpHeaders;\n    params?: HttpParams;\n  } {\n    return {\n      params: this.params,\n    };\n  }\n\n  private get params(): HttpParams {\n    return new HttpParams();\n  }\n\n  public getById<T>(apiPath: string, id: string | number): Observable<T> {\n    return this._http.get<T>(`${apiPath}/${id}`).pipe(take(1));\n  }\n\n  public create<T, DTO = unknown>(\n    apiPath: string,\n    resource: DTO,\n  ): Observable<T> {\n    return this._http.post<T>(apiPath, resource, this.options).pipe(take(1));\n  }\n\n  public update<T, DTO = unknown>(\n    apiPath: string,\n    id: number,\n    resource: DTO,\n  ): Observable<T> {\n    return this._http\n      .patch<T>(`${apiPath}/${id}`, resource, this.options)\n      .pipe(take(1));\n  }\n\n  public delete<T = unknown>(apiPath: string, id: number): Observable<T> {\n    return this._http.delete<T>(`${apiPath}/${id}`, this.options).pipe(take(1));\n  }\n\n  public search<T>(apiPath: string): Observable<T> {\n    return this._http.get<T>(`${apiPath}`).pipe(take(1));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 11
                    }
                },
                "params": {
                    "name": "params",
                    "getSignature": {
                        "name": "params",
                        "type": "",
                        "returnType": "HttpParams",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CpfValidator",
            "id": "class-CpfValidator-1400109b59d448bea354ebe2e7e3d125fb95b9a7520da143a75a8ba6f300a9c6dc9284535db75ca0d122ff1f8e03b1879193dfcf52f4683699188d4b4ba234cd",
            "file": "src/app/validators/cpf.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CpfValidator {\n  public isValid(value: string): boolean {\n    if (!value || typeof value !== 'string') return false;\n    if (value.length !== 11) return false;\n    if (this.isSequencie(value)) return false;\n\n    const { totalValue, resultValue } = this.startValues(value);\n    let calcValue = resultValue;\n    calcValue += this.calcDigit(value, 8);\n    calcValue += this.calcDigit(value, 9);\n\n    return totalValue === calcValue;\n  }\n\n  private isSequencie(value: string): boolean {\n    const sequencie = value[0].repeat(value.length);\n    return sequencie === value;\n  }\n\n  private startValues(value: string): {\n    totalValue: number;\n    resultValue: number;\n  } {\n    let totalValue = 0;\n    let resultValue = 0;\n    for (let i = 0; i < value.length; i++) {\n      const digit = Number(value[i]);\n      totalValue += digit;\n      if (i < 9) {\n        resultValue += digit;\n      }\n    }\n\n    return { totalValue, resultValue };\n  }\n\n  private calcDigit(value: string, indexEnd: number): number {\n    let total = 0;\n    for (let i = indexEnd, j = 2; i > -1; i--, j++) {\n      const digit = Number(value[i]);\n      total += digit * j;\n    }\n    const digit = 11 - (total % 11);\n    return digit > 9 ? 0 : digit;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "calcDigit",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "indexEnd",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "indexEnd",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSequencie",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startValues",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomerDataForm",
            "id": "class-CustomerDataForm-5a17f47032bde046fca72f4dbd93c34420af9f7deeccea8c4ca790360d5f9e7f5ca90a7a061cb4e435edf00f1f0b03c632f29bd6a8c6f6f21aa636f29b350887",
            "file": "src/app/pages/customer/models/customer.data-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CustomerDataForm {\n  birthDate = '';\n  cpf = '';\n  createdAt: Date | null = null;\n  email = '';\n  monthlyIncome = null;\n  name = '';\n}\n",
            "properties": [
                {
                    "name": "birthDate",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "cpf",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "createdAt",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "monthlyIncome",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomerDto",
            "id": "class-CustomerDto-6e864d0cc224099f8f13a0ae01729f25bdfd4013d61d753f030ae8c8866ecbb901632791acff1b2408e632c08deda27f0d42bff7761c9e2a7aed58c62201fd33",
            "file": "src/app/pages/customer/models/customer.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { convertToDate } from 'src/app/helper/date.helper';\n\nexport class CustomerDto {\n  birthDate: string;\n  cpf?: string;\n  email: string;\n  monthlyIncome: number;\n  name: string;\n\n  constructor(data: { [key: string]: string }) {\n    this.name = data['name'].trim();\n    this.email = data['email'].trim();\n\n    const cpf = data['cpf'];\n    if (cpf) {\n      this.cpf = cpf.trim().replace(/\\D/g, '');\n    } else {\n      delete this.cpf;\n    }\n\n    this.monthlyIncome = +data['monthlyIncome']\n      .replace(/\\./g, '')\n      .replace(',', '.');\n\n    this.birthDate = convertToDate(data['birthDate']).toISOString();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "monthlyIncome",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateValidator",
            "id": "class-DateValidator-31d11f650777fb3d356dba8b6a0b9ef94725c5cc97c27c6fd63faa20f945f5c2470301dc483ee07e37c2e0e1185712e3a300995a10cb506e7a43c57388f2d587",
            "file": "src/app/validators/date.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { convertToDate } from '../helper/date.helper';\n\nexport class DateValidator {\n  public isValid(value: string): boolean {\n    const date = convertToDate(value);\n    return !(!(date instanceof Date) || isNaN(date.getTime()));\n  }\n\n  public minAge(value: string, min: number): boolean {\n    const age = this.getAge(value);\n    return age >= min;\n  }\n\n  public getAge(value: string): number {\n    const date = convertToDate(value);\n    const today = new Date();\n    let age = today.getFullYear() - date.getFullYear();\n    today.setFullYear(today.getFullYear() - age);\n    if (date > today) {\n      age--;\n    }\n    return age;\n  }\n\n  public maxAge(value: string, max: number): boolean {\n    const age = this.getAge(value);\n    return age <= max;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getAge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxAge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minAge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormValidations",
            "id": "class-FormValidations-fa769012b0d790e4ab8d4a3e3f40690bc92d4ca08966adf708ac20e2db829068cebd61daf4b186b11e711325f08fbb60771add69dcdf192b613b5eca978ce3f2",
            "file": "src/app/form.validation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UntypedFormControl } from '@angular/forms';\nimport { CpfValidator } from './validators/cpf.validator';\nimport { DateValidator } from './validators/date.validator';\nimport { NameValidator } from './validators/name.validator';\n\nexport class FormValidations {\n  static #cpfValidator = new CpfValidator();\n  static #dateValidator = new DateValidator();\n  static #nameValidator = new NameValidator();\n\n  static getErrorMsg(\n    _: string,\n    validatorName: string,\n    validatorValue: { [key: string]: string },\n  ): string {\n    const config: { [key: string]: string } = {\n      required: `campo obrigatório`,\n      minlength: `precisa ter no mínimo ${validatorValue['requiredLength']} caractere(s)`,\n      maxlength: `precisa ter no máximo ${validatorValue['requiredLength']} caractere(s)`,\n      min: `o valor mínimo permitido é ${validatorValue['min']}`,\n      cpfInvalid: `CPF inválido`,\n      dateInvalid: `data inválido`,\n      lastNameInvalid: `percisa ter nome e sobrenome`,\n      minAgeInvalid: `idade mínima permitida é ${validatorValue} ${\n        Number(validatorValue) > 1 ? 'anos' : 'ano'\n      }`,\n      maxAgeInvalid: `idade máxima permitida é ${validatorValue} ${\n        Number(validatorValue) > 1 ? 'anos' : 'ano'\n      }`,\n    };\n\n    return config[validatorName];\n  }\n\n  static cpf(control: UntypedFormControl): object | null {\n    const value = control.value?.replace(/[^\\d]+/g, '');\n    return value && !FormValidations.#cpfValidator.isValid(value)\n      ? { cpfInvalid: true }\n      : null;\n  }\n\n  static date(control: UntypedFormControl): object | null {\n    const value = control.value?.trim();\n    return value && !FormValidations.#dateValidator.isValid(value)\n      ? { dateInvalid: true }\n      : null;\n  }\n\n  static minAge(min: number): (control: UntypedFormControl) => object | null {\n    return (control: UntypedFormControl) => {\n      const value = control.value?.trim();\n      return value && !FormValidations.#dateValidator.minAge(value, min)\n        ? { minAgeInvalid: min }\n        : null;\n    };\n  }\n\n  static maxAge(max: number): (control: UntypedFormControl) => object | null {\n    return (control: UntypedFormControl) => {\n      const value = control.value?.trim();\n      return value && !FormValidations.#dateValidator.maxAge(value, max)\n        ? { maxAgeInvalid: max }\n        : null;\n    };\n  }\n\n  static lastName(control: UntypedFormControl): object | null {\n    const value = control.value?.trim();\n    return value && !FormValidations.#nameValidator.hasLastName(value)\n      ? { lastNameInvalid: true }\n      : null;\n  }\n}\n",
            "properties": [
                {
                    "name": "#cpfValidator",
                    "defaultValue": "new CpfValidator()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124,
                        121
                    ]
                },
                {
                    "name": "#dateValidator",
                    "defaultValue": "new DateValidator()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        121
                    ]
                },
                {
                    "name": "#nameValidator",
                    "defaultValue": "new NameValidator()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cpf",
                    "args": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "date",
                    "args": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMsg",
                    "args": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validatorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validatorValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validatorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validatorValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lastName",
                    "args": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxAge",
                    "args": [
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minAge",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NameValidator",
            "id": "class-NameValidator-9711d70851a0084a9e22f9d65c6ad7f9db75d57390120eed623a800733130dff090751497e27d02eae931818a753b67e2e2cd912966af7ef4951daad2bf39be2",
            "file": "src/app/validators/name.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class NameValidator {\n  public hasLastName(value: string): boolean {\n    return value.trim().split(' ').length !== 1;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "hasLastName",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CpfMaskDirective",
            "id": "directive-CpfMaskDirective-b8426a27d79661039a29620e8e082661070782ece2a25f9b0e6eac7535bf985b506c0b0f59bd879ec416535493252214112843919d9e8f4f0ee9e47734b277ad",
            "file": "src/app/directives/cpf-mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport { isKeyNotNumber, isKeyNumber } from '../helper/number.helper';\n\n@Directive({\n  selector: '[appCpfMask]',\n})\nexport class CpfMaskDirective implements OnInit, AfterContentInit {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly _ngControl: NgControl,\n  ) {}\n\n  get control() {\n    return this._ngControl.control as AbstractControl;\n  }\n\n  get value() {\n    return this.control.value;\n  }\n\n  set value(value: string) {\n    this.control.setValue(value);\n  }\n\n  get isMasked() {\n    return /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(this.value);\n  }\n\n  public ngOnInit(): void {\n    this._elementRef.nativeElement.onkeypress = (event: KeyboardEvent) => {\n      if (isKeyNotNumber(event.key) || this.isMasked) {\n        event.preventDefault();\n      }\n    };\n  }\n\n  public ngAfterContentInit(): void {\n    this.addMask();\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent) {\n    if (isKeyNumber(event.key) && !this.isMasked) {\n      this.addMask();\n    }\n  }\n\n  private addMask(): void {\n    setTimeout(() => {\n      let value = this.value;\n      if (value) {\n        value = value.replace(/\\D/g, '');\n        value = value.replace(/(\\d{3})(\\d)/, '$1.$2');\n        value = value.replace(/(\\d{3})(\\d)/, '$1.$2');\n        this.value = value.replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n      }\n    });\n  }\n\n  @HostListener('paste', ['$event'])\n  public onPaste() {\n    setTimeout(() => this.addMask(), 150);\n  }\n}\n",
            "selector": "[appCpfMask]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49
                },
                {
                    "name": "paste",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addMask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "isMasked": {
                    "name": "isMasked",
                    "getSignature": {
                        "name": "isMasked",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "CurrencyMaskDirective",
            "id": "directive-CurrencyMaskDirective-70bc9b32d2006f7e994125f01a5f7aa3a8030d7375e90601214aa70bfa7e0a93e91c64731e7916dc5b552c1d27799770bf1c1a9fd7bbd018afac0130a86f923b",
            "file": "src/app/directives/currency-mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport {\n  formatNumber,\n  isKeyNotNumber,\n  isKeyNumber,\n} from '../helper/number.helper';\n\n@Directive({\n  selector: '[appCurrencyMask]',\n})\nexport class CurrencyMaskDirective implements OnInit, AfterContentInit {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly _ngControl: NgControl,\n  ) {}\n\n  get control() {\n    return this._ngControl.control as AbstractControl;\n  }\n\n  get value() {\n    return this.control.value;\n  }\n\n  set value(value: string) {\n    this.control.setValue(value);\n  }\n\n  public ngOnInit(): void {\n    this._elementRef.nativeElement.onkeypress = (event: KeyboardEvent) => {\n      if (isKeyNotNumber(event.key)) {\n        event.preventDefault();\n      }\n    };\n  }\n\n  public ngAfterContentInit(): void {\n    const value = this.value;\n    if (value) {\n      this.value = formatNumber(value);\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent) {\n    if (isKeyNumber(event.key)) {\n      this.addMask();\n    } else if (event.key === ',') {\n      this.addCommaIfPossible();\n    }\n  }\n\n  private addMask(): void {\n    setTimeout(() => {\n      let value = this.value;\n      if (value) {\n        value = value.replace(/\\D/g, '').toString();\n        value = (+value / 100).toFixed(2);\n        value = value.replace('.', ',');\n        this.value = value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n      }\n    });\n  }\n\n  private addCommaIfPossible(): void {\n    setTimeout(() => {\n      const value = this.value;\n      if (!value?.includes(',')) {\n        this.value = `${value},`;\n      }\n    });\n  }\n\n  @HostListener('paste', ['$event'])\n  public onPaste() {\n    setTimeout(() => this.ngAfterContentInit(), 150);\n  }\n}\n",
            "selector": "[appCurrencyMask]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                },
                {
                    "name": "paste",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addCommaIfPossible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addMask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                }
            }
        },
        {
            "name": "DateMaskDirective",
            "id": "directive-DateMaskDirective-accbb464acdbec04fe907019b7542b400848ddfa2c80aa9d4c3af9c9ef357087163ba1ce53510a42a3eb9db46f27b2420aa7b0178e4714ec37cb8e76b84dc446",
            "file": "src/app/directives/date-mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport { isKeyNotNumber, isKeyNumber } from '../helper/number.helper';\n\n@Directive({\n  selector: '[appDateMask]',\n  providers: [DatePipe],\n})\nexport class DateMaskDirective implements OnInit, AfterContentInit {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly _ngControl: NgControl,\n    private readonly _datePipe: DatePipe,\n  ) {}\n\n  get control() {\n    return this._ngControl.control as AbstractControl;\n  }\n\n  get value() {\n    return this.control.value;\n  }\n\n  set value(value: string) {\n    this.control.setValue(value);\n  }\n\n  get isMasked() {\n    return /^[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}$/g.test(this.value);\n  }\n\n  public ngOnInit(): void {\n    this._elementRef.nativeElement.onkeypress = (event: KeyboardEvent) => {\n      if (isKeyNotNumber(event.key) || this.isMasked) {\n        event.preventDefault();\n      }\n    };\n  }\n\n  public ngAfterContentInit(): void {\n    const value = this.value;\n    if (value) {\n      this.value = this._datePipe.transform(value, 'dd/MM/yyyy') as string;\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent) {\n    const isNotMasked = !this.isMasked;\n    if (isNotMasked) {\n      if (isKeyNumber(event.key)) {\n        this.addMask();\n      } else if (event.key === '/') {\n        this.addBackslashIfPossible();\n      }\n    }\n  }\n\n  private addMask(): void {\n    setTimeout(() => {\n      let value = this.value;\n      if (value && value.split('/').length < 3) {\n        value = value.replace(/\\D/g, '');\n        value = value.replace(/(\\d{2})(\\d)/, '$1/$2');\n        this.value = value.replace(/(\\d{2}\\/\\d{2})(\\d)/, '$1/$2');\n      }\n    });\n  }\n\n  private addBackslashIfPossible(): void {\n    setTimeout(() => {\n      const value = this.value;\n      if (value) {\n        const values = value.split('/');\n        if (values.length < 3) {\n          const lastIndex = values.length - 1;\n          values[lastIndex] = `${values[lastIndex]}/`.padStart(3, '0');\n          this.value = values.join('/');\n        }\n      }\n    });\n  }\n\n  @HostListener('paste', ['$event'])\n  public onPaste() {\n    setTimeout(() => {\n      const value = this.value;\n      if (value) {\n        const values = value.split('/');\n        if (values.length === 1) {\n          this.addMask();\n        } else {\n          this.value = values.map((v) => v.padStart(2, '0')).join('/');\n        }\n      }\n    }, 150);\n  }\n}\n",
            "selector": "[appDateMask]",
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55
                },
                {
                    "name": "paste",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addBackslashIfPossible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addMask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                },
                "isMasked": {
                    "name": "isMasked",
                    "getSignature": {
                        "name": "isMasked",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bcdc1a1e1c04fe955805b64d10f542f164fdb58e4238d6700f2d5f2d62671d6ff04b92df405d55d0c81a8a0211dca65ca1ab5785bbe4a9d3460ed9196e99fc13",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Teste Técnico'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Teste Técnico';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  background-color: var(--color-brand-primary-darkest);\n  color: var(--color-neutral-white);\n  padding: 15px 0px;\n  text-align: center;\n  width: 100%;\n  height: 55px;\n}\n\n.header__title-container {\n  position: relative;\n  display: inline-block;\n}\n\n.header__title {\n  line-height: 24px;\n}\n\n.header__logo {\n  height: 32px;\n  width: 140px;\n  border-top-left-radius: 86px;\n  border-bottom-right-radius: 86px;\n  background-color: var(--color-neutral-white);\n  color: var(--color-brand-primary-medium);\n  line-height: 30px;\n  display: inline-block;\n  margin-right: 6px;\n}\n\n@media only screen and (max-width: 600px) {\n  .header__logo {\n    display: none;\n  }\n}\n\n.main-container {\n  max-width: 1400px;\n  padding-left: 22px;\n  padding-right: 22px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<header class=\"header\">\n  <div class=\"header-container\">\n    <nav class=\"navbar\">\n      <app-hamburger-button></app-hamburger-button>\n    </nav>\n    <div class=\"header__title-container\">\n      <div class=\"header__logo subtitle-03\">Top Financeira</div>\n      <span class=\"header__title heading-05\">{{ title }}</span>\n    </div>\n  </div>\n</header>\n<main class=\"main\">\n  <div class=\"main-container\">\n    <router-outlet></router-outlet>\n  </div>\n</main>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-21b6f57f3f8da479e9827982e8be58ed63b8c39a8731c078ccdcb6e5884de512a23c41f2d478686a492b0c7dd336f0fd95a5fd4b50fe3a4060785bf8501412f6",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-05e5f2068be98b0a7df335b62eb58f2dff50f2e7146ca077689ba8c80ddffeb59ffc0086d3298955850286d8bd261d2f2c0a7dad1ff7f1c8bb89874d5e8aaca1-1",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"primary\" | \"secondary\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"content\" | \"columms\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() isDisabled = false;\n  @Input() type = 'submit';\n  @Input() name: 'primary' | 'secondary' = 'primary';\n  @Input() width: 'content' | 'columms' = 'content';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  background-color: transparent;\n  border: none;\n}\n\nbutton::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\nbutton.button {\n  display: flex;\n  height: 40px;\n  padding: 8px 16px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n}\n\nbutton.button.columms {\n  width: 146px;\n}\n\nbutton.button:disabled {\n  pointer-events: none;\n  background-color: var(--color-neutral-lightest);\n  color: var(--color-neutral-medium);\n}\n\n/* Primary */\nbutton.button[name=\"primary\"] {\n  background-color: var(--color-brand-primary-dark);\n  color: var(--color-neutral-white);\n}\n\nbutton.button[name=\"primary\"]:hover {\n  background-color: var(--color-brand-primary-light);\n}\n\nbutton.button[name=\"primary\"]:focus {\n  border: 2px solid var(--color-feedback-info-medium);\n  background-color: var(--color-brand-primary-medium);\n}\n\nbutton.button[name=\"primary\"]:active {\n  border: none;\n  background-color: var(--color-brand-primary-darkest);\n}\n\n/* Secondary */\nbutton.button[name=\"secondary\"] {\n  background-color: var(--color-support-02-medium);\n  color: var(--color-brand-primary-darkest);\n}\n\nbutton.button[name=\"secondary\"]:hover {\n  background-color: var(--color-support-02-dark);\n}\n\nbutton.button[name=\"secondary\"]:focus {\n  border: 2px solid var(--color-feedback-info-medium);\n  background-color: var(--color-support-02-medium);\n}\n\nbutton.button[name=\"secondary\"]:active {\n  border: none;\n  background-color: var(--color-support-02-dark);\n}\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button\n  [type]=\"type\"\n  [name]=\"name\"\n  [disabled]=\"isDisabled\"\n  [ngClass]=\"width\"\n  class=\"button subtitle-03\"\n>\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CustomerEditComponent",
            "id": "component-CustomerEditComponent-35ae2beaddd43de3ff6ee3344c9b39515f3d7de3d9b20b7bf1f6e747547607ac38ee4613633de7091a10c552299577fa9084aa6ffdee7e7a9027a43d3df060cd",
            "file": "src/app/pages/customer/customer-edit/customer-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-edit",
            "styleUrls": [
                "./customer-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#subscripton",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "showForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { CustomerService } from '../customer.service';\nimport { CustomerDataForm } from '../models/customer.data-form';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.css'],\n})\nexport class CustomerEditComponent implements OnInit, OnDestroy {\n  readonly #subscripton = new Subscription();\n\n  showForm = false;\n\n  constructor(\n    private readonly _route: ActivatedRoute,\n    private readonly _customerService: CustomerService,\n  ) {}\n\n  public ngOnInit(): void {\n    const customerId = this._route.snapshot.paramMap.get('id') as string;\n    this._customerService.getById(customerId).subscribe((data) => {\n      this._customerService.setDataForm(\n        Object.assign(new CustomerDataForm(), data),\n      );\n      const sub = this._customerService.onUpdateSubmit(+customerId).subscribe();\n      this.#subscripton.add(sub);\n      this.showForm = true;\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.#subscripton.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 class=\"heading-page\">Atualizar Cliente</h1>\n\n<app-customer-form *ngIf=\"showForm\" [cpfDisabled]=\"true\"></app-customer-form>\n"
        },
        {
            "name": "CustomerFormComponent",
            "id": "component-CustomerFormComponent-5d2676094216fd0463328b00e99c2e6a7040d8a1f290d2be4b5c284477ecc5d127ddd6922b7077a91ea25ce6193d672316df70ae1d3abaddfb7493719e347aac",
            "file": "src/app/pages/customer/components/customer-form/customer-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-form",
            "styleUrls": [
                "./customer-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cpfDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "buildFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IForm } from 'src/app/interfaces/form.interface';\nimport { FormService } from 'src/app/services/form.service';\nimport { FormValidations } from '../../../../form.validation';\nimport { CustomerService } from '../../customer.service';\nimport { CustomerDto } from '../../models/customer.dto';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css'],\n})\nexport class CustomerFormComponent implements OnInit, IForm {\n  formGroup!: FormGroup;\n\n  @Input() cpfDisabled = false;\n\n  constructor(\n    private readonly _customerService: CustomerService,\n    private readonly _formBuilder: FormBuilder,\n    private readonly _formService: FormService,\n  ) {}\n\n  public ngOnInit(): void {\n    this.buildFormGroup();\n  }\n\n  private buildFormGroup(): void {\n    const dataForm = this._customerService.dataForm;\n    this.formGroup = this._formBuilder.group({\n      birthDate: [\n        dataForm.birthDate,\n        [\n          Validators.required,\n          FormValidations.date,\n          FormValidations.minAge(18),\n          FormValidations.maxAge(60),\n        ],\n      ],\n      cpf: [\n        {\n          value: dataForm.cpf,\n          disabled: this.cpfDisabled,\n        },\n        [Validators.required, FormValidations.cpf],\n      ],\n      createdAt: [\n        {\n          value: dataForm.createdAt,\n          disabled: true,\n        },\n      ],\n      email: [dataForm.email, [Validators.email]],\n      monthlyIncome: [dataForm.monthlyIncome, [Validators.required]],\n      name: [dataForm.name, [Validators.required, FormValidations.lastName]],\n    });\n  }\n\n  public onSubmit(): void {\n    this._formService.onSubmit(this.formGroup, this.submit.bind(this));\n  }\n\n  private submit(): void {\n    const dto = new CustomerDto(this.formGroup.value);\n    this._customerService.submit$.next(dto);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form__field_name {\n  min-width: 266px;\n}\n\n.form__field_cpf {\n  min-width: 126px;\n}\n\n.form__field_birth-date {\n  min-width: 106px;\n}\n\n.form__field_monthly-income {\n  min-width: 120px;\n}\n\n.form__field_email {\n  min-width: 272px;\n}\n\n.form__field_created-at {\n  min-width: 106px;\n}\n\n.form__button-container {\n  padding-top: 64px;\n  display: inline-block;\n  flex-grow: 1;\n}\n\n.form__button {\n  float: right;\n  margin-right: 8px;\n}\n\n@media only screen and (min-width: 576px) {\n  .form__field_name {\n    flex-basis: 48%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 22%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 25%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 22%;\n  }\n\n  .form__field_email {\n    flex-basis: 48%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 25%;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .form__field_name {\n    flex-basis: 42%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 18%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 18%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 17%;\n  }\n\n  .form__field_email {\n    flex-basis: 61%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 18%;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .form__field_name {\n    flex-basis: 45%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 17%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 17%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 17%;\n  }\n\n  .form__field_email {\n    flex-basis: 45%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 17%;\n  }\n}\n\n@media only screen and (min-width: 1200px) {\n  .form__field_name {\n    flex-basis: 22%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 13%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 13%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 13%;\n  }\n\n  .form__field_email {\n    flex-basis: 22%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 10%;\n  }\n}\n\n@media only screen and (min-width: 1242px) {\n  .form__field_name {\n    flex-basis: 22%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 12%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 14%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 15%;\n  }\n\n  .form__field_email {\n    flex-basis: 22%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 10%;\n  }\n}\n\n@media only screen and (min-width: 1536px) {\n  .form__field_name {\n    flex-basis: 24%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 12%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 12%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 12%;\n  }\n\n  .form__field_email {\n    flex-basis: 24%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 12%;\n  }\n}\n",
                    "styleUrl": "./customer-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "IForm"
            ],
            "templateData": "<form class=\"form\" [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit()\">\n  <app-input\n    class=\"form__field_name\"\n    label=\"Nome:\"\n    formControlName=\"name\"\n  ></app-input>\n  <app-input\n    class=\"form__field_cpf\"\n    label=\"CPF:\"\n    formControlName=\"cpf\"\n    appCpfMask\n  ></app-input>\n  <app-input\n    class=\"form__field_birth-date\"\n    label=\"Data Nascimento:\"\n    formControlName=\"birthDate\"\n    appDateMask\n  ></app-input>\n  <app-input\n    class=\"form__field_monthly-income\"\n    label=\"Renda Mensal:\"\n    formControlName=\"monthlyIncome\"\n    appCurrencyMask\n  ></app-input>\n  <app-input\n    class=\"form__field_email\"\n    label=\"E-mail:\"\n    formControlName=\"email\"\n    type=\"email\"\n  ></app-input>\n  <app-input\n    class=\"form__field_created-at\"\n    label=\"Data Cadastro:\"\n    formControlName=\"createdAt\"\n    appDateMask\n  ></app-input>\n\n  <div class=\"form__button-container\">\n    <app-button class=\"form__button\" width=\"columms\">SALVAR</app-button>\n  </div>\n</form>\n\n<app-form-debug [form]=\"formGroup\"></app-form-debug>\n"
        },
        {
            "name": "CustomerListingComponent",
            "id": "component-CustomerListingComponent-8cfceea3c1ad57ed448bac57a5a71cf5e5781e9992693c4ff56aabc186f5c08f13047bc2740c1479c0418ba9f20766c916a6350dfcc9a41bb73fda04979d6abe",
            "file": "src/app/pages/customer/customer-listing/customer-listing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-listing",
            "styleUrls": [
                "./customer-listing.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-listing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-customer-listing',\n  templateUrl: './customer-listing.component.html',\n  styleUrls: ['./customer-listing.component.css'],\n})\nexport class CustomerListingComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-listing.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<h1 class=\"heading-page\">Clientes</h1>\n\n<app-customer-table></app-customer-table>\n"
        },
        {
            "name": "CustomerRegistrationComponent",
            "id": "component-CustomerRegistrationComponent-7a84e2394a1bca92ede23eb7584977bfe05f7345457324d51589071111e9002cd8f8f24369479e53d344af4f00565940779bc9c1de1106e57c254602a349e761",
            "file": "src/app/pages/customer/customer-registration/customer-registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-registration",
            "styleUrls": [
                "./customer-registration.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#subscripton",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        144,
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription, switchMap } from 'rxjs';\nimport { CustomerService } from '../customer.service';\nimport { CustomerDataForm } from '../models/customer.data-form';\n\n@Component({\n  selector: 'app-customer-registration',\n  templateUrl: './customer-registration.component.html',\n  styleUrls: ['./customer-registration.component.css'],\n})\nexport class CustomerRegistrationComponent implements OnInit, OnDestroy {\n  readonly #subscripton = new Subscription();\n\n  constructor(private readonly _customerService: CustomerService) {}\n\n  public ngOnInit(): void {\n    this._customerService.setDataForm(new CustomerDataForm());\n    const sub = this._customerService\n      .onCreateSubmit()\n      .pipe(switchMap((data) => this._customerService.navigatTo(data.id)))\n      .subscribe();\n    this.#subscripton.add(sub);\n  }\n\n  public ngOnDestroy(): void {\n    this.#subscripton.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-registration.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 class=\"heading-page\">Cadastrar Cliente</h1>\n\n<app-customer-form></app-customer-form>\n"
        },
        {
            "name": "CustomerTableComponent",
            "id": "component-CustomerTableComponent-e4ef6dd15021361de95d43f87c4e161884bb633a9087e03cb0910f5a8baf54222621c279fa1634d923dd35c7440875a770e0e9840513c299a770cb0c8997d62a",
            "file": "src/app/pages/customer/components/customer-table/customer-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-table",
            "styleUrls": [
                "./customer-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-customer-table',\n  templateUrl: './customer-table.component.html',\n  styleUrls: ['./customer-table.component.css'],\n})\nexport class CustomerTableComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-table.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>customer-table works!</p>\n"
        },
        {
            "name": "FormDebugComponent",
            "id": "component-FormDebugComponent-7a7c951958b144ef3ce74b0245da254a9ec1a07bd037314ffa0668a6ce9742d84366ec07433ff90df7ed8469c4f55f2b7d7ebb8ea8aaa916d5c77d34aae68056",
            "file": "src/app/components/form-debug/form-debug.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-debug",
            "styleUrls": [
                "./form-debug.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form-debug.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-form-debug',\n  templateUrl: './form-debug.component.html',\n  styleUrls: ['./form-debug.component.css'],\n})\nexport class FormDebugComponent {\n  @Input() form!: unknown;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-debug.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div style=\"margin-top: 20px\" *ngIf=\"form\" >\n\n  <div>\n    Detalhe do form\n  </div>\n\n  <pre>\n    Form válido: {{ form.valid }}\n  </pre>\n  <pre>\n    Form submetido: {{ form.submitted }}\n  </pre>\n  <pre>\n    Valores: <br> {{ form.value | json }}\n  </pre>\n\n</div>\n"
        },
        {
            "name": "HamburgerButtonComponent",
            "id": "component-HamburgerButtonComponent-eacfdfb32b3027b4c8faa1ec5ddca239837f65912d08bdd96a1c40d108118dc1c991b63792323104d624bce0145965402e5a4b8d963c9a23a63ec12e2497a975",
            "file": "src/app/components/hamburger-button/hamburger-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hamburger-button",
            "styleUrls": [
                "./hamburger-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./hamburger-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "toggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "state",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-hamburger-button',\n  templateUrl: './hamburger-button.component.html',\n  styleUrls: ['./hamburger-button.component.css'],\n})\nexport class HamburgerButtonComponent {\n  @Output() toggle = new EventEmitter<boolean>();\n\n  state = false;\n\n  public toggleState() {\n    this.state = !this.state;\n    this.toggle.emit(this.state);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.hamburger {\n  position: absolute;\n  left: 22px;\n  top: 12px;\n  display: inline-block;\n  cursor: pointer;\n}\n\n.hamburger__bar {\n  border-radius: 4px;\n  width: 30px;\n  height: 2px;\n  margin: 6px 0;\n  transition: 0.4s;\n  background-color: var(--color-neutral-white);\n}\n\n.hamburger--change > .hamburger__bar:nth-child(1) {\n  transform: translate(0, 8px) rotate(-45deg);\n}\n\n.hamburger--change > .hamburger__bar:nth-child(2) {\n  opacity: 0;\n}\n\n.hamburger--change > .hamburger__bar:nth-child(3) {\n  transform: translate(0, -8px) rotate(45deg);\n}\n\nbutton {\n  background-color: transparent;\n  border: none;\n}\n\nbutton::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n",
                    "styleUrl": "./hamburger-button.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"hamburger\"\n  [class.hamburger--change]=\"state\"\n  (click)=\"toggleState()\"\n>\n  <div class=\"hamburger__bar\"></div>\n  <div class=\"hamburger__bar\"></div>\n  <div class=\"hamburger__bar\"></div>\n</button>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a9500857cf1fe8d2de0edcc35030df16b80c4a1bedeb87972602324bdb3022e3ccc4109f2baa18d17dddde2cabb17dcc789ae31f8e89c4bc6923679edc63199b",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-4eaed58e302ede80f2601a1df93b04b9221152936b8b15f1c6cb641255cc1ff71c221094db98a57f32cba8c3eab5a883b5b16951891e730aeaa2b82db381e359",
            "file": "src/app/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.createId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "InputType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "createId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFormControlName",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControlName",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNgModel",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NgControl",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChangeTimeout",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfigControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setControlFormControlName",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "FormControlName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "FormControlName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setControlNgModel",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setHasError",
                    "args": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  forwardRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormControlDirective,\n  FormControlName,\n  FormControlStatus,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n} from '@angular/forms';\nimport {\n  ReplaySubject,\n  distinctUntilChanged,\n  skip,\n  takeUntil,\n  tap,\n} from 'rxjs';\nimport { FormValidations } from '../../form.validation';\nimport { IInput } from './input.interface';\nimport { InputType } from './input.type';\n\nlet innerId = 0;\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class InputComponent\n  implements OnInit, OnDestroy, ControlValueAccessor, IInput\n{\n  @Input() id = this.createId();\n  @Input() isReadOnly = false;\n  @Input() hasError = false;\n  @Input() label!: string;\n  @Input() placeholder = '';\n  @Input() type: InputType = 'text';\n\n  control!: FormControl;\n  value: unknown = '';\n  errorMessage = '';\n\n  private readonly destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private onChange: (value: unknown) => void = () => undefined;\n  private onTouched: () => void = () => undefined;\n\n  constructor(@Inject(Injector) private readonly _injector: Injector) {}\n\n  public ngOnInit(): void {\n    this.setControl();\n  }\n\n  private setControl(): void {\n    const injectedControl = this._injector.get(NgControl);\n    if (this.isNgModel(injectedControl)) {\n      this.setControlNgModel(injectedControl);\n    } else if (this.isFormControlName(injectedControl)) {\n      this.setControlFormControlName(injectedControl);\n    } else {\n      this.control = (injectedControl as FormControlDirective)\n        .form as FormControl;\n    }\n    this.setConfigControl();\n  }\n\n  public isNgModel(\n    injectedControl: NgControl | FormControlName,\n  ): injectedControl is NgControl {\n    return injectedControl.constructor === NgModel;\n  }\n\n  private setControlNgModel(injectedControl: NgControl): void {\n    const { control, update } = injectedControl as NgModel;\n    this.control = control;\n    this.control.valueChanges\n      .pipe(\n        tap((value: unknown) => update.emit(value)),\n        takeUntil(this.destroyed$),\n      )\n      .subscribe();\n  }\n\n  private setConfigControl(): void {\n    this.setIsReadOnly(this.control.status);\n    this.control.statusChanges\n      .pipe(distinctUntilChanged(), skip(1), takeUntil(this.destroyed$))\n      .subscribe((status) => {\n        this.setIsReadOnly(status);\n        this.setHasError(status);\n      });\n  }\n\n  public isFormControlName(\n    injectedControl: NgControl | FormControlName,\n  ): injectedControl is FormControlName {\n    return injectedControl.constructor === FormControlName;\n  }\n\n  private setControlFormControlName(injectedControl: FormControlName): void {\n    const formGroupDirective = this._injector.get(FormGroupDirective);\n    this.control = formGroupDirective.getControl(\n      injectedControl as FormControlName,\n    );\n  }\n\n  private setIsReadOnly(status: FormControlStatus): void {\n    this.isReadOnly = status === 'DISABLED';\n  }\n\n  private setHasError(status: FormControlStatus): void {\n    this.hasError = status === 'INVALID';\n    this.errorMessage = this.setErrorMessage();\n  }\n\n  private setErrorMessage(): string {\n    for (const propertyName in this.control.errors) {\n      if (\n        Object.prototype.hasOwnProperty.call(\n          this.control.errors,\n          propertyName,\n        ) &&\n        this.control.touched\n      ) {\n        return FormValidations.getErrorMsg(\n          this.label,\n          propertyName,\n          this.control.errors[propertyName],\n        );\n      }\n    }\n    return '';\n  }\n\n  public writeValue(value: unknown): void {\n    this.value = value;\n  }\n\n  public registerOnChange(cb: (value: unknown) => void): void {\n    this.onChange = cb;\n  }\n\n  public registerOnTouched(cb: () => void): void {\n    this.onTouched = cb;\n  }\n\n  public onChangeTimeout(value: unknown): void {\n    setTimeout(() => this.onChange(value));\n  }\n\n  public onBlur(): void {\n    this.onTouched();\n    this.setHasError(this.control.status);\n  }\n\n  public createId(): string {\n    return `input-id-${++innerId}`;\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-group {\n  height: 48px;\n  padding: 6px 16px 6px 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex-shrink: 0;\n  align-self: stretch;\n  border-radius: 8px;\n  border: 1px solid var(--color-neutral-lightest);\n  background-color: var(--input-background-color);\n}\n\n.form-group__label {\n  height: 12px;\n  display: block;\n  padding: 0;\n  margin: 0;\n  color: var(--color-brand-primary-medium);\n  background-color: inherit;\n}\n\n.form-group__input-container {\n  position: relative;\n  background-color: inherit;\n  width: 100%;\n}\n\n.form-group__input {\n  width: 100%;\n  height: 18px;\n  padding: 0px;\n  box-sizing: border-box;\n  background-color: inherit;\n}\n\n.form-group__alert-icon {\n  position: absolute;\n  top: 2px;\n  right: 0;\n  transform: translateY(-50%);\n  background-color: transparent;\n}\n\n.form-group--disabled {\n  background: var(--color-neutral-lightest);\n}\n\n.form-group--disabled > .form-group__input-container > .form-group__input {\n  background: var(--color-neutral-lightest);\n  border-color: var(--color-neutral-dark);\n}\n\ninput:focus {\n  border-color: transparent;\n}\n\ninput::placeholder {\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 150%;\n  color: var(--color-neutral-dark);\n}\n\ninput {\n  border: none;\n  outline: none;\n  border-color: transparent;\n}\n\n/* Chrome, Safari, Edge, Opera */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Firefox */\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor",
                "IInput"
            ],
            "templateData": "<div class=\"form-group\" [class.form-group--disabled]=\"!!isReadOnly\">\n  <label [attr.for]=\"id\" class=\"form-group__label paragraph-04\">\n    {{ label }}\n  </label>\n  <div class=\"form-group__input-container\">\n    <input\n      class=\"form-group__input paragraph-03\"\n      #input\n      [id]=\"id\"\n      [type]=\"type\"\n      [readOnly]=\"!!isReadOnly\"\n      [placeholder]=\"placeholder\"\n      [(value)]=\"value\"\n      (keyup)=\"onChangeTimeout(input.value)\"\n      (change)=\"onChangeTimeout(input.value)\"\n      (blur)=\"onBlur()\"\n    />\n    <div\n      *ngIf=\"hasError\"\n      role=\"alert\"\n      [title]=\"errorMessage\"\n      class=\"form-group__alert-icon alert__icon--md\"\n    ></div>\n  </div>\n</div>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-81d5e7c9dec0277d980191105c76f987e9d90febe22791550a5a0f1868cfd79321feae412b5f560c73ff4ab7162dab93dafc4567ad041f389917ccda4822c315",
            "file": "src/app/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css'],\n})\nexport class NotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  transition: all 0.6s;\n}\n\n.not-found {\n  display: table;\n  width: 100%;\n  height: 100vh;\n  text-align: center;\n}\n\n.not-found-container {\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.not-found-container .heading-04 {\n  display: inline-block;\n  padding-right: 12px;\n  animation: type 0.5s alternate infinite;\n}\n\n@keyframes type {\n  from {\n    box-shadow: inset -3px 0px 0px black;\n  }\n  to {\n    box-shadow: inset -3px 0px 0px transparent;\n  }\n}\n",
                    "styleUrl": "./not-found.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"not-found\">\n  <div class=\"not-found-container\">\n    <h1 class=\"heading-01\">404</h1>\n    <h4 class=\"heading-04\">Página não encontrada</h4>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-007d10ec181ada1ca4880d5e5c517615472f08a03382ccccfe5e4515926ba7481bf7075f018a58dc323a66384fd9bad6b1015ee303f204733a58f79693eaa1bb",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-b5fa749a60a05e4177d9f17c1892c1ece62d3a5deef2eff599c8ca229dd59e5423e6cf7af59d54fea4433939bfb2a75eba45b3d49cebad2eb21d5ca4b0371fe5",
            "file": "src/app/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [
                "./task.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "defaultValue": "{\n    id: '',\n    title: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "archiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "pinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Task } from './task.model';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css'],\n})\nexport class TaskComponent {\n  @Input() task: Task = {\n    id: '',\n    title: '',\n  };\n\n  @Output()\n  pinTask = new EventEmitter<Event>();\n\n  @Output()\n  archiveTask = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./task.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"list-item\">\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title\">\n    <input\n      type=\"text\"\n      [value]=\"task.title\"\n      readonly=\"true\"\n      id=\"title\"\n      name=\"title\"\n    />\n  </label>\n</div>\n"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-7d22a4fb7ba2d2b8ffabc1ecd52ab481757c9434dc25a221ca11015fb621b94f9955ed599f195f48cf6b4d2b79e0bd9e792b5605da9dbe793b13e29d6d3e5ef8",
            "file": "src/app/components/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [
                "./task-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./task-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "archiveTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "pinTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tasksInOrder",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Task } from '../task/task.model';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css'],\n})\nexport class TaskListComponent {\n  tasksInOrder: Task[] = [];\n\n  @Input() loading = false;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() pinTask: EventEmitter<unknown> = new EventEmitter();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() archiveTask: EventEmitter<unknown> = new EventEmitter();\n\n  @Input()\n  set tasks(arr: Task[]) {\n    const initialTasks = [\n      ...arr.filter((t) => t.state === 'TASK_PINNED'),\n      ...arr.filter((t) => t.state !== 'TASK_PINNED'),\n    ];\n    const filteredTasks = initialTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED',\n    );\n    this.tasksInOrder = filteredTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED',\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./task-list.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"list-items\">\n  <app-task\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (archiveTask)=\"onArchiveTask.emit($event)\"\n    (pinTask)=\"onPinTask.emit($event)\"\n  >\n  </app-task>\n  <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\n    <span class=\"icon-check\"></span>\n    <p class=\"title-message\">You have no tasks</p>\n    <p class=\"subtitle-message\">Sit back and relax</p>\n  </div>\n  <div *ngIf=\"loading\">\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-11ac2068f15a3da0f380fe74d8263b75c1083f6e47254344d7cbded09b7cf8f33853aaa4cc44d8a9ec8e66763c57e8b01382a6c9a32e1325ce3927c2e42ac25c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HamburgerButtonModule } from './components/hamburger-button/hamburger-button.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    HamburgerButtonModule,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HamburgerButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4554346b2607760ace33fbc1cd239998dcfee5b7c8b776eeaea83c037603ee3ca9c637cd3338ef1980267c27d82ceadedfec0b26f121dbd6e87bb61ed21863a4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nexport const routes: Routes = [\n  {\n    path: 'clientes',\n    loadChildren: () =>\n      \"import('./pages/customer/customer.module').then((m) => m.CustomerModule)\",\n  },\n  {\n    path: '404',\n    loadChildren: () =>\n      \"import('./pages/not-found/not-found.module').then(\\\n        (m) => m.NotFoundModule,\\\n      )\",\n  },\n  { path: '', redirectTo: 'clientes/novo', pathMatch: 'full' },\n  { path: '**', redirectTo: '404' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-a6d3210b63a9eba89291a1a6fbcb30165d9e11233005cc75aee3d8f2eeb971f355a5206db24d1820323e48285688bee4e245f282416a9edfcc8894932b5816a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ButtonComponent],\n  exports: [ButtonComponent],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerFormModule",
            "id": "module-CustomerFormModule-4410ef2aeae0f2002809e93df40d533657dc522f2d0a18253d496dd5aba51efa19bda67e87fcf3c016ab612ec38a50befac0e624fbb3da5af4ef14a1e81f5f5e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/components/customer-form/customer-form.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from 'src/app/components/button/button.module';\nimport { FormDebugComponent } from 'src/app/components/form-debug/form-debug.component';\nimport { InputModule } from 'src/app/components/input/input.module';\nimport { CpfMaskDirective } from 'src/app/directives/cpf-mask.directive';\nimport { CurrencyMaskDirective } from 'src/app/directives/currency-mask.directive';\nimport { DateMaskDirective } from 'src/app/directives/date-mask.directive';\nimport { CustomerFormComponent } from './customer-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputModule,\n    ButtonModule,\n  ],\n  declarations: [\n    CustomerFormComponent,\n    CurrencyMaskDirective,\n    CpfMaskDirective,\n    DateMaskDirective,\n    FormDebugComponent,\n  ],\n  exports: [CustomerFormComponent],\n})\nexport class CustomerFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CpfMaskDirective"
                        },
                        {
                            "name": "CurrencyMaskDirective"
                        },
                        {
                            "name": "CustomerFormComponent"
                        },
                        {
                            "name": "DateMaskDirective"
                        },
                        {
                            "name": "FormDebugComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CustomerFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerModule",
            "id": "module-CustomerModule-ea3f09250edf0f32f188538922affc3f54886ea6bf5a5cd66641e3f058cd4a5defc4b8ba7d9ba21e659d2619e71a194a4587d0461e42088c2a21df9b5f62b428",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/customer.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CustomerFormModule } from './components/customer-form/customer-form.module';\nimport { CustomerTableModule } from './components/customer-table/customer-table.module';\nimport { CustomerEditComponent } from './customer-edit/customer-edit.component';\nimport { CustomerListingComponent } from './customer-listing/customer-listing.component';\nimport { CustomerRegistrationComponent } from './customer-registration/customer-registration.component';\nimport { CustomerRoutingModule } from './customer-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CustomerRoutingModule,\n    CustomerFormModule,\n    CustomerTableModule,\n  ],\n  declarations: [\n    CustomerEditComponent,\n    CustomerListingComponent,\n    CustomerRegistrationComponent,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class CustomerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomerEditComponent"
                        },
                        {
                            "name": "CustomerListingComponent"
                        },
                        {
                            "name": "CustomerRegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomerFormModule"
                        },
                        {
                            "name": "CustomerRoutingModule"
                        },
                        {
                            "name": "CustomerTableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerRoutingModule",
            "id": "module-CustomerRoutingModule-863b1f76b7312b5cec7a0ee559bb6672ee58ed2f59470bfa810f96ef2fa5ea0c52344f58c05faabe1ce802927395d38d7f36640da3fcf8062bb65ff3f9c96d49",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/customer-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { customerEditRouting } from './customer-edit/customer-edit.routing';\nimport { customerListingRouting } from './customer-listing/customer-listing.routing';\nimport { customerRegistrationRouting } from './customer-registration/customer-registration.routing';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      customerListingRouting,\n      customerRegistrationRouting,\n      customerEditRouting,\n      {\n        path: '',\n        redirectTo: '',\n        pathMatch: 'full',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CustomerRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerTableModule",
            "id": "module-CustomerTableModule-203831965348e0371d3b47021a03fd1b9a0b3a2fcead92c3630e895882dd1564e0fcc844ddea6b8d5a67489738a7e2025eaf613a0362533fc182b1eb79c0f852",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/components/customer-table/customer-table.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonModule } from 'src/app/components/button/button.module';\nimport { InputModule } from 'src/app/components/input/input.module';\nimport { CustomerTableComponent } from './customer-table.component';\n\n@NgModule({\n  imports: [CommonModule, InputModule, ButtonModule],\n  declarations: [CustomerTableComponent],\n  exports: [CustomerTableComponent],\n})\nexport class CustomerTableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomerTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CustomerTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HamburgerButtonModule",
            "id": "module-HamburgerButtonModule-45e08903e7cd11318c8083824f67cebbff6db70bf67cbb25808eaf727c5fd5c527b30cc46a4a19e65a2ea8bd61a20e0e00995060eeea0f2470391ba3070fcce0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/hamburger-button/hamburger-button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HamburgerButtonComponent } from './hamburger-button.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [HamburgerButtonComponent],\n  exports: [HamburgerButtonComponent],\n})\nexport class HamburgerButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HamburgerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HamburgerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-dcf55523a89b65253c597df9855237cc46d15ff9c704899327ba7f86b8decac6d39eb2d60fe9d4a53de95a690e38b0c2f5f0c6041341ee52606543ddaa46e9af",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InputComponent } from './input.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputComponent],\n  exports: [InputComponent],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundModule",
            "id": "module-NotFoundModule-8f6b63fb0f259cf788f566621e15dd58795a438fbca2fa3ae4855b6c0f4c16840d7d2974578a26297ed1ad2ec49af88aa482e530b6b3ed333dfb76e149ce081c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/not-found/not-found.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NotFoundRoutingModule } from './not-found-routing.module';\nimport { NotFoundComponent } from './not-found.component';\n\n@NgModule({\n  declarations: [NotFoundComponent],\n  imports: [CommonModule, NotFoundRoutingModule],\n})\nexport class NotFoundModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NotFoundRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundRoutingModule",
            "id": "module-NotFoundRoutingModule-e5a6e2e7e39f16ddb925093d46d5cbeb6c7e84cb44f855247e3d63fdd1d8d470b520ddfdc8e040281500c4ac62f67e2b7d5418e44344e2e6e8aecc651c40fafa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/not-found/not-found-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NotFoundComponent } from './not-found.component';\n\nconst routes: Routes = [{ path: '', component: NotFoundComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NotFoundRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskListModule",
            "id": "module-TaskListModule-79871869f3a05c0be1f280a3c9d6f09ca11371d844472d53eeb0b947042e56d4e8d9413bd457e2cf44f49e07e0cc6f27170c5ea6106d016e80538bc4911d1e6d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/task-list/task-list.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TaskModule } from '../task/task.module';\nimport { TaskListComponent } from './task-list.component';\n\n@NgModule({\n  imports: [CommonModule, TaskModule],\n  declarations: [TaskListComponent],\n})\nexport class TaskListModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "id": "module-TaskModule-8cf07ee36d67adae2c89804614120b396b476603f02448a92b0b63d8a2f7fe574a2abafc39a3a77919ec9f0a72596991dc78b8c592fd7abef7e539b48a69e701",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/task/task.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TaskComponent } from './task.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TaskComponent],\n  exports: [TaskComponent],\n})\nexport class TaskModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  pinTask: action('pinTask'),\n  archiveTask: action('archiveTask'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  toggle: action('toggle'),\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    task: {\n      ...(Default.args?.task as Task),\n      state: 'TASK_ARCHIVED',\n    },\n  },\n}"
            },
            {
                "name": "convertToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/date.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: string) => {\n  let date: Date | null = null;\n  if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/.test(value)) {\n    date = new Date(value.replace(/(\\d+[/])(\\d+[/])/, '$2$1'));\n  } else if (isNumber(value)) {\n    date = new Date(+value);\n  } else {\n    date = new Date(value);\n  }\n  return date;\n}"
            },
            {
                "name": "customerEditRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/customer/customer-edit/customer-edit.routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  path: ':id',\n  component: CustomerEditComponent,\n  data: {},\n}"
            },
            {
                "name": "customerListingRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/customer/customer-listing/customer-listing.routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  path: '',\n  component: CustomerListingComponent,\n  data: {},\n}"
            },
            {
                "name": "customerRegistrationRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/customer/customer-registration/customer-registration.routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  path: 'novo',\n  component: CustomerRegistrationComponent,\n  data: {},\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'some text label:',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    task: {\n      id: '1',\n      title: 'Test Task',\n      state: 'TASK_INBOX',\n    },\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tasks: [\n      { ...TaskStories.Default.args?.task, id: '1', title: 'Task 1' },\n      { ...TaskStories.Default.args?.task, id: '2', title: 'Task 2' },\n      { ...TaskStories.Default.args?.task, id: '3', title: 'Task 3' },\n      { ...TaskStories.Default.args?.task, id: '4', title: 'Task 4' },\n      { ...TaskStories.Default.args?.task, id: '5', title: 'Task 5' },\n      { ...TaskStories.Default.args?.task, id: '6', title: 'Task 6' },\n    ],\n  },\n}"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    // Shaping the stories through args composition.\n    // Inherited data coming from the Loading story.\n    ...Loading.args,\n    loading: false,\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  baseUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "formatNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: number | string) =>\n  isNumber(value)\n    ? new Intl.NumberFormat('pt-br', { minimumFractionDigits: 2 }).format(value)\n    : value"
            },
            {
                "name": "innerId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "isKeyNotNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: unknown) => !isKeyNumber(value)"
            },
            {
                "name": "isKeyNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  value: unknown,\n): value is '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' =>\n  /^[0-9]*$/.test(`${value}`)"
            },
            {
                "name": "isNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: string | number): value is number =>\n  !isNaN(Number(value))"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tasks: [],\n    loading: true,\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Button',\n  component: ButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-button ${argsToTemplate(args)}>Lorem Ipsum</app-button>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n  title: 'Input',\n  component: InputComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-input ${argsToTemplate(args)}></app-input>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TaskComponent>",
                "defaultValue": "{\n  title: 'Task',\n  component: TaskComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: TaskComponent) => ({\n    props: {\n      ...args,\n      pinTask: actionsData.pinTask,\n      archiveTask: actionsData.archiveTask,\n    },\n    template: `<app-task ${argsToTemplate(args)}></app-task>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HamburgerButtonComponent>",
                "defaultValue": "{\n  title: 'Hamburger Button',\n  component: HamburgerButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: HamburgerButtonComponent) => ({\n    props: {\n      ...args,\n      toggle: actionsData.toggle,\n    },\n    template: `<div style=\"position: relative;background-color: var(--color-brand-primary-darkest);height: 55px;width:75px\"><app-hamburger-button ${argsToTemplate(args)}></app-hamburger-button></div>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TaskListComponent>",
                "defaultValue": "{\n  component: TaskListComponent,\n  title: 'TaskList',\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [TaskListComponent, TaskComponent],\n      imports: [CommonModule],\n    }),\n    //👇 Wraps our stories with a decorator\n    componentWrapperDecorator(\n      (story) => `<div style=\"margin: 3em\">${story}</div>`,\n    ),\n  ],\n  render: (args: TaskListComponent) => ({\n    props: {\n      ...args,\n      onPinTask: TaskStories.actionsData.pinTask,\n      onArchiveTask: TaskStories.actionsData.archiveTask,\n    },\n    template: `<app-task-list ${argsToTemplate(args)}></app-task-list>`,\n  }),\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    task: {\n      ...(Default.args?.task as Task),\n      state: 'TASK_PINNED',\n    },\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "PrimaryColumms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n  },\n}"
            },
            {
                "name": "PrimaryContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'primary',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "SecondaryColumms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n    name: 'secondary',\n  },\n}"
            },
            {
                "name": "SecondaryContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'secondary',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tasks: [\n      // Shaping the stories through args composition.\n      // Inherited data coming from the Default story.\n      ...(Default.args?.tasks?.slice(0, 5) || []),\n      { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n    ],\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "InputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"hidden\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"reset\" | \"search\" | \"submit\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
                "file": "src/app/components/input/input.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "src/app/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TaskComponent>",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HamburgerButtonComponent>",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TaskListComponent>",
                "file": "src/app/components/task-list/task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Task",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/components/task/task.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/task/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  pinTask: action('pinTask'),\n  archiveTask: action('archiveTask'),\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    task: {\n      ...(Default.args?.task as Task),\n      state: 'TASK_ARCHIVED',\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    task: {\n      id: '1',\n      title: 'Test Task',\n      state: 'TASK_INBOX',\n    },\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TaskComponent>",
                    "defaultValue": "{\n  title: 'Task',\n  component: TaskComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: TaskComponent) => ({\n    props: {\n      ...args,\n      pinTask: actionsData.pinTask,\n      archiveTask: actionsData.archiveTask,\n    },\n    template: `<app-task ${argsToTemplate(args)}></app-task>`,\n  }),\n}"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    task: {\n      ...(Default.args?.task as Task),\n      state: 'TASK_PINNED',\n    },\n  },\n}"
                }
            ],
            "src/app/components/hamburger-button/hamburger-button.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  toggle: action('toggle'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HamburgerButtonComponent>",
                    "defaultValue": "{\n  title: 'Hamburger Button',\n  component: HamburgerButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: HamburgerButtonComponent) => ({\n    props: {\n      ...args,\n      toggle: actionsData.toggle,\n    },\n    template: `<div style=\"position: relative;background-color: var(--color-brand-primary-darkest);height: 55px;width:75px\"><app-hamburger-button ${argsToTemplate(args)}></app-hamburger-button></div>`,\n  }),\n}"
                }
            ],
            "src/app/helper/date.helper.ts": [
                {
                    "name": "convertToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/date.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: string) => {\n  let date: Date | null = null;\n  if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/.test(value)) {\n    date = new Date(value.replace(/(\\d+[/])(\\d+[/])/, '$2$1'));\n  } else if (isNumber(value)) {\n    date = new Date(+value);\n  } else {\n    date = new Date(value);\n  }\n  return date;\n}"
                }
            ],
            "src/app/pages/customer/customer-edit/customer-edit.routing.ts": [
                {
                    "name": "customerEditRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/customer/customer-edit/customer-edit.routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  path: ':id',\n  component: CustomerEditComponent,\n  data: {},\n}"
                }
            ],
            "src/app/pages/customer/customer-listing/customer-listing.routing.ts": [
                {
                    "name": "customerListingRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/customer/customer-listing/customer-listing.routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  path: '',\n  component: CustomerListingComponent,\n  data: {},\n}"
                }
            ],
            "src/app/pages/customer/customer-registration/customer-registration.routing.ts": [
                {
                    "name": "customerRegistrationRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/customer/customer-registration/customer-registration.routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  path: 'novo',\n  component: CustomerRegistrationComponent,\n  data: {},\n}"
                }
            ],
            "src/app/components/input/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'some text label:',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n  title: 'Input',\n  component: InputComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-input ${argsToTemplate(args)}></app-input>`,\n  }),\n}"
                }
            ],
            "src/app/components/task-list/task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tasks: [\n      { ...TaskStories.Default.args?.task, id: '1', title: 'Task 1' },\n      { ...TaskStories.Default.args?.task, id: '2', title: 'Task 2' },\n      { ...TaskStories.Default.args?.task, id: '3', title: 'Task 3' },\n      { ...TaskStories.Default.args?.task, id: '4', title: 'Task 4' },\n      { ...TaskStories.Default.args?.task, id: '5', title: 'Task 5' },\n      { ...TaskStories.Default.args?.task, id: '6', title: 'Task 6' },\n    ],\n  },\n}"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    // Shaping the stories through args composition.\n    // Inherited data coming from the Loading story.\n    ...Loading.args,\n    loading: false,\n  },\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tasks: [],\n    loading: true,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TaskListComponent>",
                    "defaultValue": "{\n  component: TaskListComponent,\n  title: 'TaskList',\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [TaskListComponent, TaskComponent],\n      imports: [CommonModule],\n    }),\n    //👇 Wraps our stories with a decorator\n    componentWrapperDecorator(\n      (story) => `<div style=\"margin: 3em\">${story}</div>`,\n    ),\n  ],\n  render: (args: TaskListComponent) => ({\n    props: {\n      ...args,\n      onPinTask: TaskStories.actionsData.pinTask,\n      onArchiveTask: TaskStories.actionsData.archiveTask,\n    },\n    template: `<app-task-list ${argsToTemplate(args)}></app-task-list>`,\n  }),\n}"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tasks: [\n      // Shaping the stories through args composition.\n      // Inherited data coming from the Default story.\n      ...(Default.args?.tasks?.slice(0, 5) || []),\n      { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n    ],\n  },\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  baseUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/app/helper/number.helper.ts": [
                {
                    "name": "formatNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: number | string) =>\n  isNumber(value)\n    ? new Intl.NumberFormat('pt-br', { minimumFractionDigits: 2 }).format(value)\n    : value"
                },
                {
                    "name": "isKeyNotNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: unknown) => !isKeyNumber(value)"
                },
                {
                    "name": "isKeyNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  value: unknown,\n): value is '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' =>\n  /^[0-9]*$/.test(`${value}`)"
                },
                {
                    "name": "isNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: string | number): value is number =>\n  !isNaN(Number(value))"
                }
            ],
            "src/app/components/input/input.component.ts": [
                {
                    "name": "innerId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Button',\n  component: ButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-button ${argsToTemplate(args)}>Lorem Ipsum</app-button>`,\n  }),\n}"
                },
                {
                    "name": "PrimaryColumms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n  },\n}"
                },
                {
                    "name": "PrimaryContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'primary',\n  },\n}"
                },
                {
                    "name": "SecondaryColumms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n    name: 'secondary',\n  },\n}"
                },
                {
                    "name": "SecondaryContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'secondary',\n  },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/input/input.type.ts": [
                {
                    "name": "InputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"hidden\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"reset\" | \"search\" | \"submit\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
                    "file": "src/app/components/input/input.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/input/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "src/app/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/task/task.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TaskComponent>",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/hamburger-button/hamburger-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HamburgerButtonComponent>",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/task-list/task-list.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TaskListComponent>",
                    "file": "src/app/components/task-list/task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/task/task.model.ts": [
                {
                    "name": "Task",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/components/task/task.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "clientes",
                        "loadChildren": "./pages/customer/customer.module#CustomerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/customer/customer-routing.module.ts",
                                        "module": "CustomerRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "children": [
                                                    "customerListingRouting",
                                                    "customerRegistrationRouting",
                                                    "customerEditRouting",
                                                    {
                                                        "path": "",
                                                        "redirectTo": "",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CustomerModule"
                            }
                        ]
                    },
                    {
                        "path": "404",
                        "loadChildren": "./pages/not-found/not-found.module#NotFoundModule,"
                    },
                    {
                        "path": "",
                        "redirectTo": "clientes/novo",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "404"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryColumms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryColumms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form-debug/form-debug.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormDebugComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HamburgerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "innerId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInput",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/cpf-mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CpfMaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/currency-mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CurrencyMaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/date-mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DateMaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/form.validation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormValidations",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/date.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "convertToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isKeyNotNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isKeyNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/form.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/components/customer-form/customer-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/components/customer-table/customer-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-edit/customer-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-edit/customer-edit.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerEditRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-listing/customer-listing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerListingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-listing/customer-listing.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerListingRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-registration/customer-registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerRegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-registration/customer-registration.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerRegistrationRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomerService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/models/customer.data-form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomerDataForm",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/models/customer.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomerDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/models/interfaces/customer.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICustomer",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/cpf.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CpfValidator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/date.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/name.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NameValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}