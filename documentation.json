{
    "pipes": [
        {
            "name": "GetErrorMessagePipe",
            "id": "pipe-GetErrorMessagePipe-8fbda60c078a128ed8fde9e449a3973742e96dbcf74bd57c3ce6fe413b6340e9ba4a3a7295be0b7469e49b005719e513cbc9fe7d662625a1f3fd853dfc2342a7",
            "file": "src/app/components/input/get-error-message.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "component",
                            "type": "InputComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "component",
                            "type": "InputComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "getErrorMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { FormValidations } from '../../form.validation';\nimport { InputComponent } from './input.component';\n\n@Pipe({\n  name: 'getErrorMessage',\n})\nexport class GetErrorMessagePipe implements PipeTransform {\n  transform(value: boolean, component: InputComponent): string {\n    let errorMessage = '';\n    if (value) {\n      const control = component.control;\n      for (const propertyName in control.errors) {\n        if (\n          Object.prototype.hasOwnProperty.call(control.errors, propertyName) &&\n          control.touched\n        ) {\n          errorMessage = FormValidations.getErrorMsg(\n            component.label,\n            propertyName,\n            control.errors[propertyName],\n          );\n          break;\n        }\n      }\n    }\n    return errorMessage;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ICustomer",
            "id": "interface-ICustomer-a632bcbb3089ca0f7917a2f0cb205e242f0dc928d802bf42c31e331c8b779ac4be32a68a003871fafac530e0d0e24b0e7ee33d232b2b567cd8c26469da432550",
            "file": "src/app/pages/customer/models/interfaces/customer.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICustomer {\n  id: number;\n  birthDate: string;\n  cpf: string;\n  createdAt: Date;\n  email: string;\n  monthlyIncome: number;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "monthlyIncome",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IForm",
            "id": "interface-IForm-9ef83acd0b99436ed5d9bc741e1fdf82726fbe917ecfade53296dbbb90f236ca2a8fa818a5996beee3cde7308ff47068e1d2c74f82b3ad771eec1fb4b7e2765b",
            "file": "src/app/interfaces/form.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IForm {\n  onSubmit(): void;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CustomerService",
            "id": "injectable-CustomerService-03af966c933f0c48974f67b578199e261e6d8899121fb2fb2bacb781ff97dd26ba1b098154fabf1e13b2068196402d63c5dd95f0467e288a1b1353bb27a0847d",
            "file": "src/app/pages/customer/customer.service.ts",
            "properties": [
                {
                    "name": "#apiPath",
                    "defaultValue": "`${environment.baseUrl}/custormer`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "#dataForm",
                    "defaultValue": "new CustomerDataForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#remove$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "#submit$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CustomerDto>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        144,
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICustomer>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "params",
                            "type": "(string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "(string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToBack",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICustomer>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ICustomer>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submitDto",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createDtoFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createDtoFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDataForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "CustomerDataForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CustomerDataForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable, switchMap, take, tap } from 'rxjs';\nimport { DialogService } from 'src/app/components/dialog/dialog.service';\nimport { navigateTo } from 'src/app/helper/navigate.helper';\nimport { FormService } from 'src/app/services/form.service';\nimport { HttpService } from 'src/app/services/http.service';\nimport { environment } from 'src/environments/environment.prod';\nimport { CustomerDataForm } from './models/customer.data-form';\nimport { CustomerDto } from './models/customer.dto';\nimport { ICustomer } from './models/interfaces/customer.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerService {\n  #dataForm = new CustomerDataForm();\n\n  readonly #apiPath = `${environment.baseUrl}/custormer`;\n  readonly #submit$: Observable<CustomerDto>;\n  readonly #remove$: Observable<void>;\n\n  constructor(\n    private readonly _dialogService: DialogService,\n    private readonly _formService: FormService<CustomerDto>,\n    private readonly _httpServer: HttpService,\n    private readonly _router: Router,\n  ) {\n    this.#submit$ = this._formService.onSubmitDto();\n    this.#remove$ = this._formService.onRemove();\n  }\n\n  get dataForm() {\n    return this.#dataForm;\n  }\n\n  public initForm(): void {\n    this.clearForm();\n  }\n\n  public clearForm(): void {\n    this.#dataForm = new CustomerDataForm();\n  }\n\n  public submitDto(form: FormGroup, createDtoFn: () => CustomerDto) {\n    this._formService.submitDto(form, createDtoFn);\n  }\n\n  public getById(id: number | string): Observable<ICustomer> {\n    return this._httpServer.getById(this.#apiPath, id);\n  }\n\n  public onCreate(): Observable<ICustomer> {\n    return this.#submit$.pipe(\n      switchMap((dto) =>\n        this._httpServer.create<ICustomer>(this.#apiPath, dto),\n      ),\n      tap(() =>\n        this._dialogService.showPositiveFeedback({\n          message: 'Cliente adicionado com sucesso!',\n          textButton: 'OK',\n        }),\n      ),\n    );\n  }\n\n  public updateDataForm(data: CustomerDataForm): void {\n    this.#dataForm = data;\n  }\n\n  public onUpdate(id: number): Observable<ICustomer> {\n    return this.#submit$.pipe(\n      switchMap((dto) =>\n        this._httpServer.update<ICustomer>(this.#apiPath, id, dto),\n      ),\n      tap(() =>\n        this._dialogService.showPositiveFeedback({\n          message: 'Cliente atualizado com sucesso!',\n          textButton: 'OK',\n        }),\n      ),\n    );\n  }\n\n  public remove(): void {\n    this._dialogService\n      .showQuestion({\n        message: 'Deseja realmente excluir este cliente?',\n        textButtonOk: 'SIM',\n        textButtonCancel: 'NÃO',\n      })\n      .pipe(take(1))\n      .subscribe(() => {\n        this._formService.remove();\n      });\n  }\n\n  public onRemove(id: number): Observable<boolean> {\n    return this.#remove$.pipe(\n      switchMap(() => this._httpServer.delete<ICustomer>(this.#apiPath, id)),\n      switchMap(() => this.navigateToBack()),\n    );\n  }\n\n  public navigateToBack(): Observable<boolean> {\n    this.clearForm();\n    return this.navigateTo('back');\n  }\n\n  public navigateTo(...params: (string | number)[]): Observable<boolean> {\n    return navigateTo(this._router, ...params);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formService",
                        "type": "FormService<CustomerDto>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_httpServer",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formService",
                        "type": "FormService<CustomerDto>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_httpServer",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "dataForm": {
                    "name": "dataForm",
                    "getSignature": {
                        "name": "dataForm",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-c3e28b77f93f76e67a3ced220788ba84bc2528342c1f45b1e9674df2da6857eef1cb56a40567fe44b871ccc2984bad28b21877cc9054fcd52e969b6aab110316",
            "file": "src/app/components/dialog/dialog.service.ts",
            "properties": [
                {
                    "name": "#confirm$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "#dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "#types",
                    "defaultValue": "{\n    success: {\n      'icon__check-circle--md': true,\n      'dialog__form__icon--success': true,\n    },\n    danger: {\n      'icon__alert-circle--md': true,\n      'dialog__form__icon--danger': true,\n    },\n    warning: {\n      'icon__help-circle--md': true,\n      'dialog__form__icon--warning': true,\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144,
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setDialog",
                    "args": [
                        {
                            "name": "dialog",
                            "type": "DialogComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialog",
                            "type": "DialogComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showFeedback",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showNegativeFeedback",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showPositiveFeedback",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showQuestion",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { DialogComponent } from './dialog.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  readonly #confirm$ = new Subject<void>();\n  readonly #types = {\n    success: {\n      'icon__check-circle--md': true,\n      'dialog__form__icon--success': true,\n    },\n    danger: {\n      'icon__alert-circle--md': true,\n      'dialog__form__icon--danger': true,\n    },\n    warning: {\n      'icon__help-circle--md': true,\n      'dialog__form__icon--warning': true,\n    },\n  };\n\n  #dialog!: DialogComponent;\n  public setDialog(dialog: DialogComponent): void {\n    this.#dialog = dialog;\n  }\n\n  public confirm(): void {\n    this.#confirm$.next();\n  }\n\n  public showPositiveFeedback(data: {\n    message: string;\n    textButton: string;\n  }): Observable<void> {\n    return this.showFeedback(\n      Object.assign(data, { type: this.#types.success }),\n    );\n  }\n\n  public showNegativeFeedback(data: {\n    message: string;\n    textButton: string;\n  }): Observable<void> {\n    return this.showFeedback(Object.assign(data, { type: this.#types.danger }));\n  }\n\n  private showFeedback(data: {\n    message: string;\n    textButton: string;\n    type: unknown;\n  }): Observable<void> {\n    const dialog = this.#dialog;\n    dialog.message = data.message;\n    dialog.textButtonOk = data.textButton;\n    dialog.type = data.type;\n    dialog.showButtonCancel = false;\n    dialog.show();\n    return this.#confirm$.asObservable();\n  }\n\n  public showQuestion(data: {\n    message: string;\n    textButtonOk: string;\n    textButtonCancel: string;\n  }): Observable<void> {\n    const dialog = this.#dialog;\n    dialog.message = data.message;\n    dialog.textButtonOk = data.textButtonOk;\n    dialog.textButtonCancel = data.textButtonCancel;\n    dialog.type = this.#types.warning;\n    dialog.showButtonCancel = true;\n    dialog.show();\n    return this.#confirm$.asObservable();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-071a2411a6bcfc604d1de7d1138f6a084085d847d98d0e3a3919b352457c502cf4d202fe59f51f52db0c230844b8049345fe5841e607d0812fba100645d8bda7",
            "file": "src/app/services/form.service.ts",
            "properties": [
                {
                    "name": "#remove",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "#submit",
                    "defaultValue": "new Subject<DTO>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144,
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkFormValidations",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onSubmitDto",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DTO>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "submitDto",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createDtoFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup | FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createDtoFn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'any',\n})\nexport class FormService<DTO = unknown> {\n  readonly #submit = new Subject<DTO>();\n  readonly #remove = new Subject<void>();\n\n  public submitDto(form: FormGroup | FormArray, createDtoFn: () => DTO): void {\n    if (form.valid) {\n      const dto = createDtoFn();\n      this.#submit.next(dto);\n    } else {\n      this.checkFormValidations(form);\n    }\n  }\n\n  private checkFormValidations(form: FormGroup | FormArray): void {\n    Object.keys(form.controls).forEach((field) => {\n      const control = form.get(field) as AbstractControl;\n      control.markAsDirty();\n      control.markAsTouched();\n      const status = control.status;\n      (control.statusChanges as EventEmitter<string>).emit('CHECK_COMPONENT');\n      (control.statusChanges as EventEmitter<string>).emit(status);\n      if (control instanceof FormGroup || control instanceof FormArray) {\n        this.checkFormValidations(control);\n      }\n    });\n  }\n\n  public onSubmitDto(): Observable<DTO> {\n    return this.#submit.asObservable();\n  }\n\n  public remove(): void {\n    this.#remove.next(undefined);\n  }\n\n  public onRemove(): Observable<void> {\n    return this.#remove.asObservable();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-936d9c381b2f1c18e4aed80da9f668f95f6490cfdde65063b51ff73d04d937bb491b731403d812feebcac65ded2e535d9b06179e5b05d72b4185d2adafa6aabe",
            "file": "src/app/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T",
                        "DTO"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T",
                        "DTO"
                    ],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "apiPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resource",
                            "type": "DTO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, take } from 'rxjs';\n\n@Injectable({\n  providedIn: 'any',\n})\nexport class HttpService {\n  constructor(private readonly _http: HttpClient) {}\n\n  private get options(): {\n    headers?: HttpHeaders;\n    params?: HttpParams;\n  } {\n    return {\n      params: this.params,\n    };\n  }\n\n  private get params(): HttpParams {\n    return new HttpParams();\n  }\n\n  public getById<T>(apiPath: string, id: string | number): Observable<T> {\n    return this._http.get<T>(`${apiPath}/${id}`).pipe(take(1));\n  }\n\n  public create<T, DTO = unknown>(\n    apiPath: string,\n    resource: DTO,\n  ): Observable<T> {\n    return this._http.post<T>(apiPath, resource, this.options).pipe(take(1));\n  }\n\n  public update<T, DTO = unknown>(\n    apiPath: string,\n    id: number,\n    resource: DTO,\n  ): Observable<T> {\n    return this._http\n      .patch<T>(`${apiPath}/${id}`, resource, this.options)\n      .pipe(take(1));\n  }\n\n  public delete<T = unknown>(apiPath: string, id: number): Observable<T> {\n    return this._http.delete<T>(`${apiPath}/${id}`, this.options).pipe(take(1));\n  }\n\n  public search<T>(apiPath: string): Observable<T> {\n    return this._http.get<T>(`${apiPath}`).pipe(take(1));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 11
                    }
                },
                "params": {
                    "name": "params",
                    "getSignature": {
                        "name": "params",
                        "type": "",
                        "returnType": "HttpParams",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CpfValidator",
            "id": "class-CpfValidator-1400109b59d448bea354ebe2e7e3d125fb95b9a7520da143a75a8ba6f300a9c6dc9284535db75ca0d122ff1f8e03b1879193dfcf52f4683699188d4b4ba234cd",
            "file": "src/app/validators/cpf.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CpfValidator {\n  public isValid(value: string): boolean {\n    if (!value || typeof value !== 'string') return false;\n    if (value.length !== 11) return false;\n    if (this.isSequencie(value)) return false;\n\n    const { totalValue, resultValue } = this.startValues(value);\n    let calcValue = resultValue;\n    calcValue += this.calcDigit(value, 8);\n    calcValue += this.calcDigit(value, 9);\n\n    return totalValue === calcValue;\n  }\n\n  private isSequencie(value: string): boolean {\n    const sequencie = value[0].repeat(value.length);\n    return sequencie === value;\n  }\n\n  private startValues(value: string): {\n    totalValue: number;\n    resultValue: number;\n  } {\n    let totalValue = 0;\n    let resultValue = 0;\n    for (let i = 0; i < value.length; i++) {\n      const digit = Number(value[i]);\n      totalValue += digit;\n      if (i < 9) {\n        resultValue += digit;\n      }\n    }\n\n    return { totalValue, resultValue };\n  }\n\n  private calcDigit(value: string, indexEnd: number): number {\n    let total = 0;\n    for (let i = indexEnd, j = 2; i > -1; i--, j++) {\n      const digit = Number(value[i]);\n      total += digit * j;\n    }\n    const digit = 11 - (total % 11);\n    return digit > 9 ? 0 : digit;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "calcDigit",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "indexEnd",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "indexEnd",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSequencie",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startValues",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomerDataForm",
            "id": "class-CustomerDataForm-02a6f21ac17eacd521236a2cd8ce322572086574dd04997c6666a028d6af84c4e9172c674de978f10da1b8599f758570797d7458b970eaf581a3f0ae1f6b3ee9",
            "file": "src/app/pages/customer/models/customer.data-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ICustomer } from './interfaces/customer.interface';\n\nexport class CustomerDataForm {\n  readonly birthDate = { value: '', disabled: false };\n  readonly cpf = { value: '', disabled: false };\n  readonly createdAt = { value: null, disabled: true };\n  readonly email = { value: '', disabled: false };\n  readonly monthlyIncome = { value: null, disabled: false };\n  readonly name = { value: '', disabled: false };\n\n  static fromCustomer(customer: ICustomer): CustomerDataForm {\n    const dataForm = new CustomerDataForm();\n    for (const [key, attr] of Object.entries(dataForm)) {\n      if (Object.prototype.hasOwnProperty.call(customer, key)) {\n        attr.value = (customer as unknown as { [key: string]: string })[key];\n      }\n    }\n    return dataForm;\n  }\n\n  public disableCpf(): this {\n    this.cpf.disabled = true;\n    return this;\n  }\n}\n",
            "properties": [
                {
                    "name": "birthDate",
                    "defaultValue": "{ value: '', disabled: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "cpf",
                    "defaultValue": "{ value: '', disabled: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "createdAt",
                    "defaultValue": "{ value: null, disabled: true }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "{ value: '', disabled: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "monthlyIncome",
                    "defaultValue": "{ value: null, disabled: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "{ value: '', disabled: false }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "disableCpf",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fromCustomer",
                    "args": [
                        {
                            "name": "customer",
                            "type": "ICustomer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CustomerDataForm",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "customer",
                            "type": "ICustomer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomerDto",
            "id": "class-CustomerDto-6e864d0cc224099f8f13a0ae01729f25bdfd4013d61d753f030ae8c8866ecbb901632791acff1b2408e632c08deda27f0d42bff7761c9e2a7aed58c62201fd33",
            "file": "src/app/pages/customer/models/customer.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { convertToDate } from 'src/app/helper/date.helper';\n\nexport class CustomerDto {\n  birthDate: string;\n  cpf?: string;\n  email: string;\n  monthlyIncome: number;\n  name: string;\n\n  constructor(data: { [key: string]: string }) {\n    this.name = data['name'].trim();\n    this.email = data['email'].trim();\n\n    const cpf = data['cpf'];\n    if (cpf) {\n      this.cpf = cpf.trim().replace(/\\D/g, '');\n    } else {\n      delete this.cpf;\n    }\n\n    this.monthlyIncome = +data['monthlyIncome']\n      .replace(/\\./g, '')\n      .replace(',', '.');\n\n    this.birthDate = convertToDate(data['birthDate']).toISOString();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "birthDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "cpf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "monthlyIncome",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateValidator",
            "id": "class-DateValidator-31d11f650777fb3d356dba8b6a0b9ef94725c5cc97c27c6fd63faa20f945f5c2470301dc483ee07e37c2e0e1185712e3a300995a10cb506e7a43c57388f2d587",
            "file": "src/app/validators/date.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { convertToDate } from '../helper/date.helper';\n\nexport class DateValidator {\n  public isValid(value: string): boolean {\n    const date = convertToDate(value);\n    return !(!(date instanceof Date) || isNaN(date.getTime()));\n  }\n\n  public minAge(value: string, min: number): boolean {\n    const age = this.getAge(value);\n    return age >= min;\n  }\n\n  public getAge(value: string): number {\n    const date = convertToDate(value);\n    const today = new Date();\n    let age = today.getFullYear() - date.getFullYear();\n    today.setFullYear(today.getFullYear() - age);\n    if (date > today) {\n      age--;\n    }\n    return age;\n  }\n\n  public maxAge(value: string, max: number): boolean {\n    const age = this.getAge(value);\n    return age <= max;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getAge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxAge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minAge",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormValidations",
            "id": "class-FormValidations-9362f830fd2fa05d756213170c1c556fed2514c92b51e167b870ab9b005f487abac77c30d12d9ea12e588ac4dd1e60241b264d241e9203288fc325fb6b858b94",
            "file": "src/app/form.validation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UntypedFormControl } from '@angular/forms';\nimport { CpfValidator } from './validators/cpf.validator';\nimport { DateValidator } from './validators/date.validator';\nimport { NameValidator } from './validators/name.validator';\n\nexport class FormValidations {\n  static #cpfValidator = new CpfValidator();\n  static #dateValidator = new DateValidator();\n  static #nameValidator = new NameValidator();\n\n  static getErrorMsg(\n    _: string,\n    validatorName: string,\n    validatorValue: { [key: string]: string },\n  ): string {\n    const config: { [key: string]: string } = {\n      required: `campo obrigatório`,\n      minlength: `precisa ter no mínimo ${validatorValue['requiredLength']} caractere(s)`,\n      maxlength: `precisa ter no máximo ${validatorValue['requiredLength']} caractere(s)`,\n      min: `o valor mínimo permitido é ${validatorValue['min']}`,\n      cpfInvalid: `CPF inválido`,\n      dateInvalid: `data inválida`,\n      lastNameInvalid: `percisa ter nome e sobrenome`,\n      minAgeInvalid: `idade mínima permitida é ${validatorValue} ${\n        Number(validatorValue) > 1 ? 'anos' : 'ano'\n      }`,\n      maxAgeInvalid: `idade máxima permitida é ${validatorValue} ${\n        Number(validatorValue) > 1 ? 'anos' : 'ano'\n      }`,\n    };\n\n    return config[validatorName];\n  }\n\n  static cpf(control: UntypedFormControl): object | null {\n    const value = control.value?.replace(/[^\\d]+/g, '');\n    return value && !FormValidations.#cpfValidator.isValid(value)\n      ? { cpfInvalid: true }\n      : null;\n  }\n\n  static date(control: UntypedFormControl): object | null {\n    const value = control.value?.trim();\n    return value && !FormValidations.#dateValidator.isValid(value)\n      ? { dateInvalid: true }\n      : null;\n  }\n\n  static minAge(min: number): (control: UntypedFormControl) => object | null {\n    return (control: UntypedFormControl) => {\n      const value = control.value?.trim();\n      return value && !FormValidations.#dateValidator.minAge(value, min)\n        ? { minAgeInvalid: min }\n        : null;\n    };\n  }\n\n  static maxAge(max: number): (control: UntypedFormControl) => object | null {\n    return (control: UntypedFormControl) => {\n      const value = control.value?.trim();\n      return value && !FormValidations.#dateValidator.maxAge(value, max)\n        ? { maxAgeInvalid: max }\n        : null;\n    };\n  }\n\n  static lastName(control: UntypedFormControl): object | null {\n    const value = control.value?.trim();\n    return value && !FormValidations.#nameValidator.hasLastName(value)\n      ? { lastNameInvalid: true }\n      : null;\n  }\n}\n",
            "properties": [
                {
                    "name": "#cpfValidator",
                    "defaultValue": "new CpfValidator()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124,
                        121
                    ]
                },
                {
                    "name": "#dateValidator",
                    "defaultValue": "new DateValidator()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124,
                        121
                    ]
                },
                {
                    "name": "#nameValidator",
                    "defaultValue": "new NameValidator()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124,
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cpf",
                    "args": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "date",
                    "args": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMsg",
                    "args": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validatorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validatorValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validatorName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validatorValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lastName",
                    "args": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "maxAge",
                    "args": [
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minAge",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | null",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NameValidator",
            "id": "class-NameValidator-9711d70851a0084a9e22f9d65c6ad7f9db75d57390120eed623a800733130dff090751497e27d02eae931818a753b67e2e2cd912966af7ef4951daad2bf39be2",
            "file": "src/app/validators/name.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class NameValidator {\n  public hasLastName(value: string): boolean {\n    return value.trim().split(' ').length !== 1;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "hasLastName",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CpfMaskDirective",
            "id": "directive-CpfMaskDirective-50c277a110231a88c0bf1f3c4879a0123c7c80ac1b30fac45f62539ba4c4181fe9cd205228df7c108ede5b951205c82b651fa811d42f87931535a1311aef46b3",
            "file": "src/app/directives/cpf-mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport { isKeyNotNumber, isKeyNumber } from '../helper/number.helper';\n\n@Directive({\n  selector: '[appCpfMask]',\n})\nexport class CpfMaskDirective implements OnInit, AfterContentInit {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly _ngControl: NgControl,\n  ) {}\n\n  get control() {\n    return this._ngControl.control as AbstractControl;\n  }\n\n  get value() {\n    return this.control.value;\n  }\n\n  set value(value: string) {\n    this.control.setValue(value);\n  }\n\n  get isMasked() {\n    return /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(this.value);\n  }\n\n  public ngOnInit(): void {\n    this._elementRef.nativeElement.onkeypress = (event: KeyboardEvent) => {\n      if (isKeyNotNumber(event.key) || this.isMasked) {\n        event.preventDefault();\n      }\n    };\n  }\n\n  public ngAfterContentInit(): void {\n    this.addMask();\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent) {\n    const isNotMasked = !this.isMasked;\n    if (isNotMasked) {\n      if (isKeyNumber(event.key)) {\n        this.addMask();\n      } else if (event.key === '.') {\n        this.addDotIfPossible();\n      } else if (event.key === '-') {\n        this.addDashIfPossible();\n      }\n    }\n  }\n\n  private addMask(): void {\n    setTimeout(() => {\n      let value = this.value;\n      if (value) {\n        value = value.replace(/\\D/g, '');\n        value = value.replace(/(\\d{3})(\\d)/, '$1.$2');\n        value = value.replace(/(\\d{3})(\\d)/, '$1.$2');\n        this.value = value.replace(/(\\d{3})(\\d{1,2})$/, '$1-$2');\n      }\n    });\n  }\n\n  private addDotIfPossible(): void {\n    setTimeout(() => {\n      const value = this.value;\n      if (value) {\n        const values = value.split('.');\n        const lastIndex = values.length - 1;\n        if (values.length < 3 && /^\\d{3}$/.test(values[lastIndex])) {\n          values[lastIndex] = `${values[lastIndex]}.`;\n          this.value = values.join('');\n        }\n      }\n    });\n  }\n\n  private addDashIfPossible(): void {\n    setTimeout(() => {\n      const value = this.value;\n      if (\n        value &&\n        !value.includes('-') &&\n        /^\\d{3}\\.\\d{3}\\.\\d{3}$/.test(value)\n      ) {\n        this.value = `${value}-`;\n      }\n    });\n  }\n\n  @HostListener('paste', ['$event'])\n  public onPaste() {\n    setTimeout(() => this.addMask(), 150);\n  }\n}\n",
            "selector": "[appCpfMask]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49
                },
                {
                    "name": "paste",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addDashIfPossible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addDotIfPossible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addMask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "isMasked": {
                    "name": "isMasked",
                    "getSignature": {
                        "name": "isMasked",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "CurrencyMaskDirective",
            "id": "directive-CurrencyMaskDirective-70bc9b32d2006f7e994125f01a5f7aa3a8030d7375e90601214aa70bfa7e0a93e91c64731e7916dc5b552c1d27799770bf1c1a9fd7bbd018afac0130a86f923b",
            "file": "src/app/directives/currency-mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport {\n  formatNumber,\n  isKeyNotNumber,\n  isKeyNumber,\n} from '../helper/number.helper';\n\n@Directive({\n  selector: '[appCurrencyMask]',\n})\nexport class CurrencyMaskDirective implements OnInit, AfterContentInit {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly _ngControl: NgControl,\n  ) {}\n\n  get control() {\n    return this._ngControl.control as AbstractControl;\n  }\n\n  get value() {\n    return this.control.value;\n  }\n\n  set value(value: string) {\n    this.control.setValue(value);\n  }\n\n  public ngOnInit(): void {\n    this._elementRef.nativeElement.onkeypress = (event: KeyboardEvent) => {\n      if (isKeyNotNumber(event.key)) {\n        event.preventDefault();\n      }\n    };\n  }\n\n  public ngAfterContentInit(): void {\n    const value = this.value;\n    if (value) {\n      this.value = formatNumber(value);\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent) {\n    if (isKeyNumber(event.key)) {\n      this.addMask();\n    } else if (event.key === ',') {\n      this.addCommaIfPossible();\n    }\n  }\n\n  private addMask(): void {\n    setTimeout(() => {\n      let value = this.value;\n      if (value) {\n        value = value.replace(/\\D/g, '').toString();\n        value = (+value / 100).toFixed(2);\n        value = value.replace('.', ',');\n        this.value = value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n      }\n    });\n  }\n\n  private addCommaIfPossible(): void {\n    setTimeout(() => {\n      const value = this.value;\n      if (!value?.includes(',')) {\n        this.value = `${value},`;\n      }\n    });\n  }\n\n  @HostListener('paste', ['$event'])\n  public onPaste() {\n    setTimeout(() => this.ngAfterContentInit(), 150);\n  }\n}\n",
            "selector": "[appCurrencyMask]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                },
                {
                    "name": "paste",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addCommaIfPossible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addMask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                }
            }
        },
        {
            "name": "DateMaskDirective",
            "id": "directive-DateMaskDirective-17f761edb7d5c1761764113e16f3bb34ec43121994b3348932ff8af3ac7fb4538492dcd6b0d500fb11007ce8d9ac7a6c99d6b4c6b2ed520d07e3f8d71a48cde4",
            "file": "src/app/directives/date-mask.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { AbstractControl, NgControl } from '@angular/forms';\nimport { isKeyNotNumber, isKeyNumber } from '../helper/number.helper';\n\n@Directive({\n  selector: '[appDateMask]',\n  providers: [DatePipe],\n})\nexport class DateMaskDirective implements OnInit, AfterContentInit {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private readonly _ngControl: NgControl,\n    private readonly _datePipe: DatePipe,\n  ) {}\n\n  get control() {\n    return this._ngControl.control as AbstractControl;\n  }\n\n  get value() {\n    return this.control.value;\n  }\n\n  set value(value: string) {\n    this.control.setValue(value);\n  }\n\n  get isMasked() {\n    return /^[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}$/g.test(this.value);\n  }\n\n  public ngOnInit(): void {\n    this._elementRef.nativeElement.onkeypress = (event: KeyboardEvent) => {\n      if (isKeyNotNumber(event.key) || this.isMasked) {\n        event.preventDefault();\n      }\n    };\n  }\n\n  public ngAfterContentInit(): void {\n    const value = this.value;\n    if (value) {\n      this.value = this._datePipe.transform(value, 'dd/MM/yyyy') as string;\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  public onKeyUp(event: KeyboardEvent) {\n    const isNotMasked = !this.isMasked;\n    if (isNotMasked) {\n      if (isKeyNumber(event.key)) {\n        this.addMask();\n      } else if (event.key === '/') {\n        this.addBackslashIfPossible();\n      }\n    }\n  }\n\n  private addMask(): void {\n    setTimeout(() => {\n      let value = this.value;\n      if (value?.split('/').length < 3) {\n        value = value.replace(/\\D/g, '');\n        value = value.replace(/(\\d{2})(\\d)/, '$1/$2');\n        this.value = value.replace(/(\\d{2}\\/\\d{2})(\\d)/, '$1/$2');\n      }\n    });\n  }\n\n  private addBackslashIfPossible(): void {\n    setTimeout(() => {\n      const value = this.value;\n      if (value) {\n        const values = value.split('/');\n        if (values.length < 3) {\n          const lastIndex = values.length - 1;\n          values[lastIndex] = `${values[lastIndex]}/`.padStart(3, '0');\n          this.value = values.join('');\n        }\n      }\n    });\n  }\n\n  @HostListener('paste', ['$event'])\n  public onPaste() {\n    setTimeout(() => {\n      const value = this.value;\n      if (value) {\n        const values = value.split('/');\n        if (values.length === 1) {\n          this.addMask();\n        } else {\n          this.value = values.map((v) => v.padStart(2, '0')).join('/');\n        }\n      }\n    }, 150);\n  }\n}\n",
            "selector": "[appDateMask]",
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55
                },
                {
                    "name": "paste",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addBackslashIfPossible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addMask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                },
                "isMasked": {
                    "name": "isMasked",
                    "getSignature": {
                        "name": "isMasked",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4ade2353b2c20fe6537149b72bae14cb8fc69fa025f2b1f727fe26aa4fc8141e93a1d24461c4fa8844aa622230b0e2580992b22af037ff7c5736301433bcc1a1",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Teste Técnico'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Teste Técnico';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  background-color: var(--color-brand-primary-darkest);\n  color: var(--color-neutral-white);\n  padding: 15px 0px;\n  text-align: center;\n  width: 100%;\n  height: 55px;\n}\n\n.header__title-container {\n  position: relative;\n  display: inline-block;\n}\n\n.header__title {\n  line-height: 24px;\n}\n\n.header__logo {\n  height: 32px;\n  width: 140px;\n  border-top-left-radius: 86px;\n  border-bottom-right-radius: 86px;\n  background-color: var(--color-neutral-white);\n  color: var(--color-brand-primary-medium);\n  line-height: 30px;\n  display: inline-block;\n  margin-right: 6px;\n}\n\n@media only screen and (max-width: 600px) {\n  .header__logo {\n    display: none;\n  }\n}\n\n.main-container {\n  max-width: 1400px;\n  padding-left: 22px;\n  padding-right: 22px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-dialog></app-dialog>\n<header class=\"header\">\n  <div class=\"header-container\">\n    <nav class=\"navbar\">\n      <app-hamburger-button></app-hamburger-button>\n    </nav>\n    <div class=\"header__title-container\">\n      <div class=\"header__logo subtitle-03\">Top Financeira</div>\n      <span class=\"header__title heading-05\">{{ title }}</span>\n    </div>\n  </div>\n</header>\n<main class=\"main\">\n  <div class=\"main-container\">\n    <router-outlet></router-outlet>\n  </div>\n</main>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-21b6f57f3f8da479e9827982e8be58ed63b8c39a8731c078ccdcb6e5884de512a23c41f2d478686a492b0c7dd336f0fd95a5fd4b50fe3a4060785bf8501412f6",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? 'storybook-button--primary'\n      : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-2d440c2c82bcbb8d723b0a44572a9b81cfd00740bd0dc517464dbc3105cdbd8528901f014cebc38776d6ca518afbc165dc85ffe433994e0c6fe42f4035744a97-1",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"primary\" | \"secondary\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"submit\" | \"button\"",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"content\" | \"columms\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() isDisabled = false;\n  @Input() type: 'submit' | 'button' = 'submit';\n  @Input() name: 'primary' | 'secondary' = 'primary';\n  @Input() width: 'content' | 'columms' = 'content';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  background-color: transparent;\n  border: none;\n}\n\nbutton::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\nbutton.button {\n  display: flex;\n  height: 40px;\n  padding: 8px 16px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n}\n\nbutton.button.columms {\n  width: 146px;\n}\n\n/* Primary */\nbutton.button[name=\"primary\"] {\n  background-color: var(--color-brand-primary-dark);\n  color: var(--color-neutral-white);\n}\n\nbutton.button[name=\"primary\"]:hover {\n  background-color: var(--color-brand-primary-light);\n}\n\nbutton.button[name=\"primary\"]:focus {\n  border: 2px solid var(--color-feedback-info-medium);\n  background-color: var(--color-brand-primary-medium);\n}\n\nbutton.button[name=\"primary\"]:active {\n  border: none;\n  background-color: var(--color-brand-primary-darkest);\n}\n\n/* Secondary */\nbutton.button[name=\"secondary\"] {\n  background-color: var(--color-support-02-medium);\n  color: var(--color-brand-primary-darkest);\n}\n\nbutton.button[name=\"secondary\"]:hover {\n  background-color: var(--color-support-02-dark);\n}\n\nbutton.button[name=\"secondary\"]:focus {\n  border: 2px solid var(--color-feedback-info-medium);\n  background-color: var(--color-support-02-medium);\n}\n\nbutton.button[name=\"secondary\"]:active {\n  border: none;\n  background-color: var(--color-support-02-dark);\n}\n\nbutton.button:disabled {\n  pointer-events: none;\n  background-color: var(--color-neutral-lightest);\n  color: var(--color-neutral-medium);\n}\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button\n  [type]=\"type\"\n  [name]=\"name\"\n  [disabled]=\"isDisabled\"\n  [ngClass]=\"width\"\n  class=\"button subtitle-03\"\n>\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CustomerEditComponent",
            "id": "component-CustomerEditComponent-54338773d53d3e091921b129e509b11923edea8fbed20619340fef2e03714546c025be57f4eb187e39b792678c1480dc9bc3fcea128fb50f7af89383fca44bdc",
            "file": "src/app/pages/customer/customer-edit/customer-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-edit",
            "styleUrls": [
                "./customer-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#subscripton",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        144,
                        121
                    ]
                },
                {
                    "name": "showForm",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reloadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setRemove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUpdate",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { DialogService } from 'src/app/components/dialog/dialog.service';\nimport { CustomerService } from '../customer.service';\nimport { CustomerDataForm } from '../models/customer.data-form';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.css'],\n})\nexport class CustomerEditComponent implements OnInit, OnDestroy {\n  readonly #subscripton = new Subscription();\n\n  showForm = true;\n\n  constructor(\n    private readonly _customerService: CustomerService,\n    private readonly _dialogService: DialogService,\n    private readonly _route: ActivatedRoute,\n  ) {}\n\n  public ngOnInit(): void {\n    this._customerService.initForm();\n    const customerId = +(this._route.snapshot.paramMap.get('id') as string);\n    this._customerService.getById(customerId).subscribe({\n      next: (data) => {\n        this._customerService.updateDataForm(\n          CustomerDataForm.fromCustomer(data).disableCpf(),\n        );\n        this.setUpdate(customerId);\n        this.setRemove(customerId);\n        this.reloadForm();\n      },\n      error: (error) => {\n        if (error.status === 404) {\n          const sub = this._dialogService\n            .showNegativeFeedback({\n              message: 'Cliente não encontrado!',\n              textButton: 'OK',\n            })\n            .subscribe(() => {\n              this._customerService.navigateToBack();\n            });\n          this.#subscripton.add(sub);\n        }\n      },\n    });\n  }\n\n  private setUpdate(id: number): void {\n    const sub = this._customerService.onUpdate(id).subscribe();\n    this.#subscripton.add(sub);\n  }\n\n  private setRemove(id: number): void {\n    const sub = this._customerService.onRemove(id).subscribe();\n    this.#subscripton.add(sub);\n  }\n\n  private reloadForm(): void {\n    this.showForm = false;\n    setTimeout(() => {\n      this.showForm = true;\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.#subscripton.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 class=\"heading-page\">Atualizar Cliente</h1>\n\n<app-customer-form\n  *ngIf=\"showForm\"\n  [removeDisabled]=\"false\"\n></app-customer-form>\n"
        },
        {
            "name": "CustomerFormComponent",
            "id": "component-CustomerFormComponent-d75b64e608a1933d915fc4f6152db7f7904352b46fbaea7cf09e481c65a5a5c11a4c2fa918dbce9c61e8d84b822c3e3a5f64c035a078db85c879f901d663ce45",
            "file": "src/app/pages/customer/components/customer-form/customer-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-form",
            "styleUrls": [
                "./customer-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "removeDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "buildFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "returnToCustomers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IForm } from 'src/app/interfaces/form.interface';\nimport { FormValidations } from '../../../../form.validation';\nimport { CustomerService } from '../../customer.service';\nimport { CustomerDto } from '../../models/customer.dto';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css'],\n})\nexport class CustomerFormComponent implements OnInit, IForm {\n  formGroup!: FormGroup;\n\n  @Input() removeDisabled = true;\n\n  constructor(\n    private readonly _customerService: CustomerService,\n    private readonly _formBuilder: FormBuilder,\n  ) {}\n\n  public ngOnInit(): void {\n    this.buildFormGroup();\n  }\n\n  private buildFormGroup(): void {\n    const dataForm = this._customerService.dataForm;\n    this.formGroup = this._formBuilder.group({\n      birthDate: [\n        dataForm.birthDate,\n        [\n          Validators.required,\n          FormValidations.date,\n          FormValidations.minAge(18),\n          FormValidations.maxAge(60),\n        ],\n      ],\n      cpf: [dataForm.cpf, [Validators.required, FormValidations.cpf]],\n      createdAt: [dataForm.createdAt],\n      email: [dataForm.email, [Validators.email]],\n      monthlyIncome: [dataForm.monthlyIncome, [Validators.required]],\n      name: [dataForm.name, [Validators.required, FormValidations.lastName]],\n    });\n  }\n\n  public onSubmit(): void {\n    this._customerService.submitDto(\n      this.formGroup,\n      () => new CustomerDto(this.formGroup.value),\n    );\n  }\n\n  public returnToCustomers(): void {\n    this._customerService.navigateToBack();\n  }\n\n  public onRemove(): void {\n    this._customerService.remove();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form__field_name {\n  min-width: 266px;\n}\n\n.form__field_cpf {\n  min-width: 126px;\n}\n\n.form__field_birth-date {\n  min-width: 106px;\n}\n\n.form__field_monthly-income {\n  min-width: 120px;\n}\n\n.form__field_email {\n  min-width: 272px;\n}\n\n.form__field_created-at {\n  min-width: 106px;\n}\n\n.form__button-container {\n  padding-top: 64px;\n  display: inline-block;\n  width: 100%;\n  flex-grow: 1;\n}\n\n.form__button--return {\n  float: left;\n  margin-left: 0.5%;\n}\n\n.form__button--remove {\n  float: right;\n  margin-right: 10px;\n}\n\n.form__button--save {\n  float: right;\n  margin-right: 0.5%;\n}\n\n@media only screen and (min-width: 576px) {\n  .form__field_name {\n    flex-basis: 48%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 22%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 25%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 22%;\n  }\n\n  .form__field_email {\n    flex-basis: 48%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 25%;\n  }\n}\n\n@media only screen and (max-width: 600px) {\n  .form__button--return {\n    display: none;\n  }\n\n  .form__button--remove {\n    float: left;\n    margin-right: 0px;\n    margin-left: 0.5%;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .form__field_name {\n    flex-basis: 42%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 18%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 18%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 17%;\n  }\n\n  .form__field_email {\n    flex-basis: 61%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 18%;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .form__field_name {\n    flex-basis: 45%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 17%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 17%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 17%;\n  }\n\n  .form__field_email {\n    flex-basis: 45%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 17%;\n  }\n}\n\n@media only screen and (min-width: 1200px) {\n  .form__field_name {\n    flex-basis: 22%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 13%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 13%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 13%;\n  }\n\n  .form__field_email {\n    flex-basis: 22%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 10%;\n  }\n}\n\n@media only screen and (min-width: 1242px) {\n  .form__field_name {\n    flex-basis: 22%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 12%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 14%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 15%;\n  }\n\n  .form__field_email {\n    flex-basis: 22%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 10%;\n  }\n}\n\n@media only screen and (min-width: 1536px) {\n  .form__field_name {\n    flex-basis: 24%;\n  }\n\n  .form__field_cpf {\n    flex-basis: 12%;\n  }\n\n  .form__field_birth-date {\n    flex-basis: 12%;\n  }\n\n  .form__field_monthly-income {\n    flex-basis: 12%;\n  }\n\n  .form__field_email {\n    flex-basis: 24%;\n  }\n\n  .form__field_created-at {\n    flex-basis: 12%;\n  }\n}\n",
                    "styleUrl": "./customer-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "IForm"
            ],
            "templateData": "<form class=\"form\" [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit()\">\n  <app-input\n    class=\"form__field_name\"\n    label=\"Nome:\"\n    formControlName=\"name\"\n  ></app-input>\n  <app-input\n    class=\"form__field_cpf\"\n    label=\"CPF:\"\n    formControlName=\"cpf\"\n    appCpfMask\n  ></app-input>\n  <app-input\n    class=\"form__field_birth-date\"\n    label=\"Data Nascimento:\"\n    formControlName=\"birthDate\"\n    appDateMask\n  ></app-input>\n  <app-input\n    class=\"form__field_monthly-income\"\n    label=\"Renda Mensal:\"\n    formControlName=\"monthlyIncome\"\n    appCurrencyMask\n  ></app-input>\n  <app-input\n    class=\"form__field_email\"\n    label=\"E-mail:\"\n    formControlName=\"email\"\n    type=\"email\"\n  ></app-input>\n  <app-input\n    class=\"form__field_created-at\"\n    label=\"Data Cadastro:\"\n    formControlName=\"createdAt\"\n    appDateMask\n  ></app-input>\n\n  <div class=\"form__button-container\">\n    <app-button\n      (click)=\"returnToCustomers()\"\n      name=\"secondary\"\n      class=\"form__button form__button--return\"\n      width=\"columms\"\n      type=\"button\"\n      >VOLTAR</app-button\n    >\n\n    <app-button\n      name=\"primary\"\n      class=\"form__button form__button--save\"\n      width=\"columms\"\n      >SALVAR</app-button\n    >\n    <app-button\n      (click)=\"onRemove()\"\n      name=\"primary\"\n      class=\"form__button form__button--remove\"\n      width=\"columms\"\n      type=\"button\"\n      [isDisabled]=\"removeDisabled\"\n      >REMOVER</app-button\n    >\n  </div>\n</form>\n"
        },
        {
            "name": "CustomerListingComponent",
            "id": "component-CustomerListingComponent-8cfceea3c1ad57ed448bac57a5a71cf5e5781e9992693c4ff56aabc186f5c08f13047bc2740c1479c0418ba9f20766c916a6350dfcc9a41bb73fda04979d6abe",
            "file": "src/app/pages/customer/customer-listing/customer-listing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-listing",
            "styleUrls": [
                "./customer-listing.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-listing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-customer-listing',\n  templateUrl: './customer-listing.component.html',\n  styleUrls: ['./customer-listing.component.css'],\n})\nexport class CustomerListingComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-listing.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<h1 class=\"heading-page\">Clientes</h1>\n\n<app-customer-table></app-customer-table>\n"
        },
        {
            "name": "CustomerRegistrationComponent",
            "id": "component-CustomerRegistrationComponent-ba7456ae94115e2fd7d1069205f20960d42cba087436ef6c476657f52ec317132ac5425270062ba3dafb5fc9f67963dc79d0b49c72c43f169a9ff7ee21533cf8",
            "file": "src/app/pages/customer/customer-registration/customer-registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-registration",
            "styleUrls": [
                "./customer-registration.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#subscripton",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        144,
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription, switchMap } from 'rxjs';\nimport { CustomerService } from '../customer.service';\n\n@Component({\n  selector: 'app-customer-registration',\n  templateUrl: './customer-registration.component.html',\n  styleUrls: ['./customer-registration.component.css'],\n})\nexport class CustomerRegistrationComponent implements OnInit, OnDestroy {\n  readonly #subscripton = new Subscription();\n\n  constructor(private readonly _customerService: CustomerService) {}\n\n  public ngOnInit(): void {\n    this._customerService.initForm();\n    this.setCreate();\n  }\n\n  private setCreate(): void {\n    const sub = this._customerService\n      .onCreate()\n      .pipe(switchMap((data) => this._customerService.navigateTo(data.id)))\n      .subscribe();\n    this.#subscripton.add(sub);\n  }\n\n  public ngOnDestroy(): void {\n    this.#subscripton.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-registration.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_customerService",
                        "type": "CustomerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 class=\"heading-page\">Cadastrar Cliente</h1>\n\n<app-customer-form></app-customer-form>\n"
        },
        {
            "name": "CustomerTableComponent",
            "id": "component-CustomerTableComponent-e4ef6dd15021361de95d43f87c4e161884bb633a9087e03cb0910f5a8baf54222621c279fa1634d923dd35c7440875a770e0e9840513c299a770cb0c8997d62a",
            "file": "src/app/pages/customer/components/customer-table/customer-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-table",
            "styleUrls": [
                "./customer-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-customer-table',\n  templateUrl: './customer-table.component.html',\n  styleUrls: ['./customer-table.component.css'],\n})\nexport class CustomerTableComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./customer-table.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>customer-table works!</p>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-1316b0e40025e498cf61603959fc29e6b5e6a99ea4f8ffff99121405147532caabd6c15bc6cfc8d49fa4a9d24778104d6e76e7f8ad2775f9f39fb08504b605c8",
            "file": "src/app/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [
                "./dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDialogElement>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dialog'"
                        }
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showButtonCancel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "textButtonCancel",
                    "defaultValue": "'CANCELAR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "textButtonOk",
                    "defaultValue": "'OK'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';\nimport { DialogService } from './dialog.service';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.css'],\n})\nexport class DialogComponent implements AfterViewInit {\n  @ViewChild('dialog') dialogRef!: ElementRef<HTMLDialogElement>;\n\n  constructor(private readonly _dialogService: DialogService) {}\n\n  textButtonOk = 'OK';\n  textButtonCancel = 'CANCELAR';\n  showButtonCancel = true;\n  message = '';\n\n  type!: unknown;\n\n  get dialog() {\n    return this.dialogRef.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    this.onClose();\n    this._dialogService.setDialog(this);\n  }\n\n  private onClose(): void {\n    this.dialog.addEventListener('close', () => {\n      this.dialog.classList.remove('dialog--active');\n    });\n  }\n\n  public show(): void {\n    this.dialog.showModal();\n    this.dialog.classList.add('dialog--active');\n  }\n\n  public confirm(): void {\n    this._dialogService.confirm();\n    this.dialog.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/app/components/button/button.component.css\";\n\nbutton.button:focus {\n  border: 2px solid transparent !important;\n}\n\n.dialog {\n  margin: auto;\n  opacity: 0;\n  transform: translateY(10px);\n  transition:\n    transform 0.15s ease,\n    opacity 0.15s ease;\n  border: 0px;\n  border-radius: 20px;\n  &::backdrop {\n    background-color: rgba(0, 0, 0, 0);\n    transition: background-color 0.15s ease;\n  }\n}\n\n.dialog--active {\n  width: 382px;\n  height: 286px;\n  border-radius: 60px 0px 60px 60px;\n  transform: translateY(0px);\n  opacity: 1;\n  &::backdrop {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n}\n\n.dialog__form__button-container {\n  display: flex;\n  width: 100%;\n  flex-grow: 1;\n  justify-content: space-around;\n}\n\n.dialog__form__button {\n  display: flex;\n}\n\n.dialog__form__message-container {\n  height: 176px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  flex-grow: 1;\n  gap: 20px;\n  padding-top: 26px;\n}\n\n.dialog__form__message {\n  color: var(--color-brand-primary-medium);\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 130%;\n}\n\n.dialog__form__icon {\n  width: 57px;\n  height: 57px;\n  background-size: 57px 57px;\n}\n\n.dialog__form__icon--success {\n  filter: invert(94%) sepia(90%) saturate(818%) hue-rotate(41deg)\n    brightness(94%) contrast(79%);\n}\n\n.dialog__form__icon--danger {\n  filter: invert(27%) sepia(98%) saturate(6090%) hue-rotate(340deg)\n    brightness(92%) contrast(97%);\n}\n\n.dialog__form__icon--warning {\n  filter: invert(69%) sepia(99%) saturate(382%) hue-rotate(7deg)\n    brightness(104%) contrast(90%);\n}\n",
                    "styleUrl": "./dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "dialog": {
                    "name": "dialog",
                    "getSignature": {
                        "name": "dialog",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "templateData": "<dialog #dialog class=\"dialog\">\n  <form class=\"dialog__form form\">\n    <div class=\"dialog__form__message-container\">\n      <i class=\"dialog__form__icon\" [ngClass]=\"type\"></i>\n      <p class=\"dialog__form__message\">\n        {{ message }}\n      </p>\n    </div>\n    <div class=\"dialog__form__button-container\">\n      <button\n        *ngIf=\"showButtonCancel\"\n        name=\"primary\"\n        class=\"dialog__form__button dialog__form__button--cancel button subtitle-03 columms\"\n        formmethod=\"dialog\"\n      >\n        {{ textButtonCancel }}\n      </button>\n      <button\n        name=\"primary\"\n        class=\"dialog__form__button dialog__form__button--ok button subtitle-03 columms\"\n        type=\"button\"\n        (click)=\"confirm()\"\n      >\n        {{ textButtonOk }}\n      </button>\n    </div>\n  </form>\n</dialog>\n"
        },
        {
            "name": "HamburgerButtonComponent",
            "id": "component-HamburgerButtonComponent-eacfdfb32b3027b4c8faa1ec5ddca239837f65912d08bdd96a1c40d108118dc1c991b63792323104d624bce0145965402e5a4b8d963c9a23a63ec12e2497a975",
            "file": "src/app/components/hamburger-button/hamburger-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hamburger-button",
            "styleUrls": [
                "./hamburger-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./hamburger-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "toggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "state",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-hamburger-button',\n  templateUrl: './hamburger-button.component.html',\n  styleUrls: ['./hamburger-button.component.css'],\n})\nexport class HamburgerButtonComponent {\n  @Output() toggle = new EventEmitter<boolean>();\n\n  state = false;\n\n  public toggleState() {\n    this.state = !this.state;\n    this.toggle.emit(this.state);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button.hamburger {\n  position: absolute;\n  left: 22px;\n  top: 12px;\n  display: inline-block;\n  cursor: pointer;\n}\n\n.hamburger__bar {\n  border-radius: 4px;\n  width: 30px;\n  height: 2px;\n  margin: 6px 0;\n  transition: 0.4s;\n  background-color: var(--color-neutral-white);\n}\n\n.hamburger--change > .hamburger__bar:nth-child(1) {\n  transform: translate(0, 8px) rotate(-45deg);\n}\n\n.hamburger--change > .hamburger__bar:nth-child(2) {\n  opacity: 0;\n}\n\n.hamburger--change > .hamburger__bar:nth-child(3) {\n  transform: translate(0, -8px) rotate(45deg);\n}\n\nbutton {\n  background-color: transparent;\n  border: none;\n}\n\nbutton::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n",
                    "styleUrl": "./hamburger-button.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"hamburger\"\n  [class.hamburger--change]=\"state\"\n  (click)=\"toggleState()\"\n>\n  <div class=\"hamburger__bar\"></div>\n  <div class=\"hamburger__bar\"></div>\n  <div class=\"hamburger__bar\"></div>\n</button>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a9500857cf1fe8d2de0edcc35030df16b80c4a1bedeb87972602324bdb3022e3ccc4109f2baa18d17dddde2cabb17dcc789ae31f8e89c4bc6923679edc63199b",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-0b0f802c0a72f248fe3db759e348ce884d8526346fe1477eea1abbefece3fecf70b355c2688f1b2aa972832ad0d3a18e32c664deb64e5dc9df9712f78d7a6302",
            "file": "src/app/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "this.createId()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isReadOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "InputType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "createId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFormControlName",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControlName",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNgModel",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NgControl",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl | FormControlName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChangeTimeout",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cb",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setConfigControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setControlFormControlName",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "FormControlName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "FormControlName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setControlNgModel",
                    "args": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "injectedControl",
                            "type": "NgControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHasError",
                    "args": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.control.status"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.control.status",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsReadOnly",
                    "args": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "FormControlStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  forwardRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormControlDirective,\n  FormControlName,\n  FormControlStatus,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n} from '@angular/forms';\nimport {\n  ReplaySubject,\n  distinctUntilChanged,\n  skip,\n  takeUntil,\n  tap,\n} from 'rxjs';\nimport { InputType } from './input.type';\n\nlet innerId = 0;\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class InputComponent implements OnInit, OnDestroy, ControlValueAccessor {\n  @Input() id = this.createId();\n  @Input() isReadOnly = false;\n  @Input() hasError = false;\n  @Input() label!: string;\n  @Input() placeholder = '';\n  @Input() type: InputType = 'text';\n\n  control!: FormControl;\n  value: unknown = '';\n\n  private readonly destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private onChange: (value: unknown) => void = () => undefined;\n  private onTouched: () => void = () => undefined;\n\n  constructor(@Inject(Injector) private readonly _injector: Injector) {}\n\n  public ngOnInit(): void {\n    this.setControl();\n  }\n\n  private setControl(): void {\n    const injectedControl = this._injector.get(NgControl);\n    if (this.isNgModel(injectedControl)) {\n      this.setControlNgModel(injectedControl);\n    } else if (this.isFormControlName(injectedControl)) {\n      this.setControlFormControlName(injectedControl);\n    } else {\n      this.control = (injectedControl as FormControlDirective).form;\n    }\n    this.setConfigControl();\n  }\n\n  public isNgModel(\n    injectedControl: NgControl | FormControlName,\n  ): injectedControl is NgControl {\n    return injectedControl.constructor === NgModel;\n  }\n\n  private setControlNgModel(injectedControl: NgControl): void {\n    const { control, update } = injectedControl as NgModel;\n    this.control = control;\n    this.control.valueChanges\n      .pipe(\n        tap((value: unknown) => update.emit(value)),\n        takeUntil(this.destroyed$),\n      )\n      .subscribe();\n  }\n\n  private setConfigControl(): void {\n    this.setIsReadOnly(this.control.status);\n    this.control.statusChanges\n      .pipe(distinctUntilChanged(), skip(1), takeUntil(this.destroyed$))\n      .subscribe((status) => {\n        this.setIsReadOnly(status);\n        this.setHasError(status);\n      });\n  }\n\n  public isFormControlName(\n    injectedControl: NgControl | FormControlName,\n  ): injectedControl is FormControlName {\n    return injectedControl.constructor === FormControlName;\n  }\n\n  private setControlFormControlName(injectedControl: FormControlName): void {\n    const formGroupDirective = this._injector.get(FormGroupDirective);\n    this.control = formGroupDirective.getControl(injectedControl);\n  }\n\n  private setIsReadOnly(status: FormControlStatus): void {\n    this.isReadOnly = status === 'DISABLED';\n  }\n\n  setHasError(status: FormControlStatus = this.control.status): void {\n    this.hasError = false;\n    setTimeout(() => {\n      this.hasError = status === 'INVALID';\n    }, 10);\n  }\n\n  public writeValue(value: unknown): void {\n    this.value = value;\n  }\n\n  public registerOnChange(cb: (value: unknown) => void): void {\n    this.onChange = cb;\n  }\n\n  public registerOnTouched(cb: () => void): void {\n    this.onTouched = cb;\n  }\n\n  public onChangeTimeout(value: unknown): void {\n    setTimeout(() => this.onChange(value));\n  }\n\n  public onBlur(): void {\n    this.onTouched();\n    this.setHasError(this.control.status);\n  }\n\n  public createId(): string {\n    return `input-id-${++innerId}`;\n  }\n\n  public ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-group {\n  height: 48px;\n  padding: 6px 16px 6px 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex-shrink: 0;\n  align-self: stretch;\n  border-radius: 8px;\n  border: 1px solid var(--color-neutral-lightest);\n  background-color: var(--input-background-color);\n}\n\n.form-group__label {\n  height: 12px;\n  display: block;\n  padding: 0;\n  margin: 0;\n  color: var(--color-brand-primary-medium);\n  background-color: inherit;\n}\n\n.form-group__input-container {\n  position: relative;\n  background-color: inherit;\n  width: 100%;\n}\n\n.form-group__input {\n  width: 100%;\n  height: 18px;\n  padding: 0px;\n  box-sizing: border-box;\n  background-color: inherit;\n}\n\n.form-group__alert-icon-container {\n  position: relative;\n  cursor: pointer;\n  display: inline-block;\n  width: 0;\n  height: 0;\n}\n\n.form-group__alert-icon {\n  position: absolute;\n  top: -16px;\n  right: -8px;\n  transform: translateY(-50%);\n}\n\n.form-group--disabled {\n  background: var(--color-neutral-lightest);\n  pointer-events: none;\n}\n\n.form-group--disabled > .form-group__input-container > .form-group__input {\n  background: var(--color-neutral-lightest);\n  border-color: var(--color-neutral-dark);\n}\n\ninput:focus {\n  border-color: transparent;\n}\n\ninput::placeholder {\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 150%;\n  color: var(--color-neutral-dark);\n}\n\ninput {\n  border: none;\n  outline: none;\n  border-color: transparent;\n}\n\n/* Chrome, Safari, Edge, Opera */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Firefox */\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n\n[data-tooltip] {\n  --offset: 0.2rem;\n  --carat-size: 8px;\n\n  &[data-tooltip-anchor=\"bottom\"]::before {\n    left: -4px;\n  }\n\n  &[data-tooltip-anchor=\"bottom\"]::after {\n    left: -4px;\n  }\n}\n",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"form-group\" [class.form-group--disabled]=\"!!isReadOnly\">\n  <label [attr.for]=\"id\" class=\"form-group__label paragraph-04\">\n    {{ label }}\n  </label>\n  <div class=\"form-group__input-container\">\n    <input\n      class=\"form-group__input paragraph-03\"\n      #input\n      [id]=\"id\"\n      [type]=\"type\"\n      [readOnly]=\"!!isReadOnly\"\n      [placeholder]=\"placeholder\"\n      [(value)]=\"value\"\n      (keyup)=\"onChangeTimeout(input.value)\"\n      (change)=\"onChangeTimeout(input.value)\"\n      (blur)=\"onBlur()\"\n    />\n    <div\n      (click)=\"setHasError()\"\n      *ngIf=\"hasError\"\n      class=\"form-group__alert-icon-container paragraph-04\"\n      data-tooltip-anchor=\"bottom\"\n      [attr.data-tooltip]=\"hasError | getErrorMessage: this\"\n    >\n      <i class=\"form-group__alert-icon icon__alert-triangle--md\"></i>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LaunchDialogComponent",
            "id": "component-LaunchDialogComponent-78d5fc37127bf6c391023746853c828116d4d43292037e197f6fcc299344621e667ffbe7f3c2a09dd3b1572e33167e6274a9ba6592bd5b724be190ea18e64afb",
            "file": "src/app/components/dialog/dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-launcher",
            "styleUrls": [],
            "styles": [],
            "template": "<app-button (click)=\"show()\">Dialog</app-button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "method",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textButtonCancel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textButtonOk",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showNegativeFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showPositiveFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { argsToTemplate, moduleMetadata } from '@storybook/angular';\nimport { ButtonModule } from '../button/button.module';\nimport { DialogModule } from './dialog.module';\nimport { DialogService } from './dialog.service';\n\n@Component({\n  selector: 'app-launcher',\n  template: ` <app-button (click)=\"show()\">Dialog</app-button> `,\n})\nclass LaunchDialogComponent {\n  @Input() textButtonOk = '';\n  @Input() textButtonCancel = '';\n  @Input() message = '';\n  @Input() method = '';\n\n  constructor(private _dialogService: DialogService) {}\n\n  public showPositiveFeedback(): void {\n    this._dialogService.showPositiveFeedback({\n      message: this.message,\n      textButton: this.textButtonOk,\n    });\n  }\n\n  public showNegativeFeedback(): void {\n    this._dialogService.showNegativeFeedback({\n      message: this.message,\n      textButton: this.textButtonOk,\n    });\n  }\n\n  public showQuestion(): void {\n    this._dialogService.showQuestion({\n      message: this.message,\n      textButtonOk: this.textButtonOk,\n      textButtonCancel: this.textButtonCancel,\n    });\n  }\n\n  public show(): void {\n    if (this.method === 'showPositiveFeedback') {\n      this.showPositiveFeedback();\n    }\n\n    if (this.method === 'showNegativeFeedback') {\n      this.showNegativeFeedback();\n    }\n\n    if (this.method === 'showQuestion') {\n      this.showQuestion();\n    }\n  }\n}\n\nconst meta: Meta<LaunchDialogComponent> = {\n  title: 'Dialog',\n  component: LaunchDialogComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [CommonModule, DialogModule, ButtonModule],\n    }),\n  ],\n  render: (args: LaunchDialogComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `\n        <app-dialog></app-dialog>\n        <app-launcher ${argsToTemplate(args)}></app-launcher>\n    `,\n  }),\n};\n\nexport default meta;\ntype Story = StoryObj<LaunchDialogComponent>;\n\nexport const DialogPositiveFeedback: Story = {\n  args: {\n    textButtonOk: 'OK',\n    message: 'some positive feedback',\n    method: 'showPositiveFeedback',\n  },\n};\n\nexport const DialogNegativeFeedback: Story = {\n  args: {\n    textButtonOk: 'OK',\n    message: 'some negative feedback',\n    method: 'showNegativeFeedback',\n  },\n};\n\nexport const DialogQuestion: Story = {\n  args: {\n    textButtonOk: 'OK',\n    textButtonCancel: 'Cancel',\n    message: 'some question?',\n    method: 'showQuestion',\n  },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-81d5e7c9dec0277d980191105c76f987e9d90febe22791550a5a0f1868cfd79321feae412b5f560c73ff4ab7162dab93dafc4567ad041f389917ccda4822c315",
            "file": "src/app/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css'],\n})\nexport class NotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  transition: all 0.6s;\n}\n\n.not-found {\n  display: table;\n  width: 100%;\n  height: 100vh;\n  text-align: center;\n}\n\n.not-found-container {\n  display: table-cell;\n  vertical-align: middle;\n}\n\n.not-found-container .heading-04 {\n  display: inline-block;\n  padding-right: 12px;\n  animation: type 0.5s alternate infinite;\n}\n\n@keyframes type {\n  from {\n    box-shadow: inset -3px 0px 0px black;\n  }\n  to {\n    box-shadow: inset -3px 0px 0px transparent;\n  }\n}\n",
                    "styleUrl": "./not-found.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"not-found\">\n  <div class=\"not-found-container\">\n    <h1 class=\"heading-01\">404</h1>\n    <h4 class=\"heading-04\">Página não encontrada</h4>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-007d10ec181ada1ca4880d5e5c517615472f08a03382ccccfe5e4515926ba7481bf7075f018a58dc323a66384fd9bad6b1015ee303f204733a58f79693eaa1bb",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-07fd766610a11b7ecb0337589c0bd1981d90854fda8cacef8b8f13ffbe85b9fad4f48f0aedf44773b189461587fe876e8893a0810a4bb7dac95b8fed4264c090",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DialogModule } from './components/dialog/dialog.module';\nimport { HamburgerButtonModule } from './components/hamburger-button/hamburger-button.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    HamburgerButtonModule,\n    DialogModule,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "DialogModule"
                        },
                        {
                            "name": "HamburgerButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4554346b2607760ace33fbc1cd239998dcfee5b7c8b776eeaea83c037603ee3ca9c637cd3338ef1980267c27d82ceadedfec0b26f121dbd6e87bb61ed21863a4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nexport const routes: Routes = [\n  {\n    path: 'clientes',\n    loadChildren: () =>\n      \"import('./pages/customer/customer.module').then((m) => m.CustomerModule)\",\n  },\n  {\n    path: '404',\n    loadChildren: () =>\n      \"import('./pages/not-found/not-found.module').then(\\\n        (m) => m.NotFoundModule,\\\n      )\",\n  },\n  { path: '', redirectTo: 'clientes/novo', pathMatch: 'full' },\n  { path: '**', redirectTo: '404' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-a6d3210b63a9eba89291a1a6fbcb30165d9e11233005cc75aee3d8f2eeb971f355a5206db24d1820323e48285688bee4e245f282416a9edfcc8894932b5816a0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ButtonComponent],\n  exports: [ButtonComponent],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerFormModule",
            "id": "module-CustomerFormModule-6164478a15099497799df3c96f3351cc3394814655f2b5305115332a929dd91d0d7c76f31e7cd1abffbe047eb86d02997af54fad9339dffdd7317baf1f62957c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/components/customer-form/customer-form.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ButtonModule } from 'src/app/components/button/button.module';\nimport { InputModule } from 'src/app/components/input/input.module';\nimport { CpfMaskDirective } from 'src/app/directives/cpf-mask.directive';\nimport { CurrencyMaskDirective } from 'src/app/directives/currency-mask.directive';\nimport { DateMaskDirective } from 'src/app/directives/date-mask.directive';\nimport { CustomerFormComponent } from './customer-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    InputModule,\n    ButtonModule,\n  ],\n  declarations: [\n    CustomerFormComponent,\n    CurrencyMaskDirective,\n    CpfMaskDirective,\n    DateMaskDirective,\n  ],\n  exports: [CustomerFormComponent],\n})\nexport class CustomerFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CpfMaskDirective"
                        },
                        {
                            "name": "CurrencyMaskDirective"
                        },
                        {
                            "name": "CustomerFormComponent"
                        },
                        {
                            "name": "DateMaskDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CustomerFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerModule",
            "id": "module-CustomerModule-ea3f09250edf0f32f188538922affc3f54886ea6bf5a5cd66641e3f058cd4a5defc4b8ba7d9ba21e659d2619e71a194a4587d0461e42088c2a21df9b5f62b428",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/customer.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CustomerFormModule } from './components/customer-form/customer-form.module';\nimport { CustomerTableModule } from './components/customer-table/customer-table.module';\nimport { CustomerEditComponent } from './customer-edit/customer-edit.component';\nimport { CustomerListingComponent } from './customer-listing/customer-listing.component';\nimport { CustomerRegistrationComponent } from './customer-registration/customer-registration.component';\nimport { CustomerRoutingModule } from './customer-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CustomerRoutingModule,\n    CustomerFormModule,\n    CustomerTableModule,\n  ],\n  declarations: [\n    CustomerEditComponent,\n    CustomerListingComponent,\n    CustomerRegistrationComponent,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class CustomerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomerEditComponent"
                        },
                        {
                            "name": "CustomerListingComponent"
                        },
                        {
                            "name": "CustomerRegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomerFormModule"
                        },
                        {
                            "name": "CustomerRoutingModule"
                        },
                        {
                            "name": "CustomerTableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerRoutingModule",
            "id": "module-CustomerRoutingModule-863b1f76b7312b5cec7a0ee559bb6672ee58ed2f59470bfa810f96ef2fa5ea0c52344f58c05faabe1ce802927395d38d7f36640da3fcf8062bb65ff3f9c96d49",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/customer-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { customerEditRouting } from './customer-edit/customer-edit.routing';\nimport { customerListingRouting } from './customer-listing/customer-listing.routing';\nimport { customerRegistrationRouting } from './customer-registration/customer-registration.routing';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      customerListingRouting,\n      customerRegistrationRouting,\n      customerEditRouting,\n      {\n        path: '',\n        redirectTo: '',\n        pathMatch: 'full',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CustomerRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerTableModule",
            "id": "module-CustomerTableModule-203831965348e0371d3b47021a03fd1b9a0b3a2fcead92c3630e895882dd1564e0fcc844ddea6b8d5a67489738a7e2025eaf613a0362533fc182b1eb79c0f852",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/customer/components/customer-table/customer-table.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonModule } from 'src/app/components/button/button.module';\nimport { InputModule } from 'src/app/components/input/input.module';\nimport { CustomerTableComponent } from './customer-table.component';\n\n@NgModule({\n  imports: [CommonModule, InputModule, ButtonModule],\n  declarations: [CustomerTableComponent],\n  exports: [CustomerTableComponent],\n})\nexport class CustomerTableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomerTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CustomerTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-1183e8280205c7ac5c8219c531b5b92d339008bb5f01fba035429b9a53ad409958ee9a81a63cc7a580a978090187fd176aabce971f86edee5031174754a4f35a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DialogComponent } from './dialog.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [DialogComponent],\n  exports: [DialogComponent],\n})\nexport class DialogModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HamburgerButtonModule",
            "id": "module-HamburgerButtonModule-fff25fe2b9ebbacdd606944e3a6506390f920f09341ae2a826698d9416be82086c55a8eaacb506ef25aaf8f55a8ae94e47b101374f9aef74bed796e6a59cb1e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/hamburger-button/hamburger-button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { HamburgerButtonComponent } from './hamburger-button.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [HamburgerButtonComponent],\n  exports: [HamburgerButtonComponent],\n})\nexport class HamburgerButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HamburgerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HamburgerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-6c15337d47988552cb121dd0a7b4a04674ef880f376782a945ff9166f5a8877ee9935dee71c4c0b3e9928a7a6eb9456c9cd0d06837e6ea1d5deea323be30c854",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { GetErrorMessagePipe } from './get-error-message.pipe';\nimport { InputComponent } from './input.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [InputComponent, GetErrorMessagePipe],\n  exports: [InputComponent],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GetErrorMessagePipe"
                        },
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundModule",
            "id": "module-NotFoundModule-8f6b63fb0f259cf788f566621e15dd58795a438fbca2fa3ae4855b6c0f4c16840d7d2974578a26297ed1ad2ec49af88aa482e530b6b3ed333dfb76e149ce081c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/not-found/not-found.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NotFoundRoutingModule } from './not-found-routing.module';\nimport { NotFoundComponent } from './not-found.component';\n\n@NgModule({\n  declarations: [NotFoundComponent],\n  imports: [CommonModule, NotFoundRoutingModule],\n})\nexport class NotFoundModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NotFoundRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotFoundRoutingModule",
            "id": "module-NotFoundRoutingModule-e5a6e2e7e39f16ddb925093d46d5cbeb6c7e84cb44f855247e3d63fdd1d8d470b520ddfdc8e040281500c4ac62f67e2b7d5418e44344e2e6e8aecc651c40fafa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/not-found/not-found-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NotFoundComponent } from './not-found.component';\n\nconst routes: Routes = [{ path: '', component: NotFoundComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NotFoundRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  toggle: action('toggle'),\n}"
            },
            {
                "name": "convertToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/date.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: string) => {\n  let date: Date | null = null;\n  if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/.test(value)) {\n    date = new Date(value.replace(/(\\d+[/])(\\d+[/])/, '$2$1'));\n  } else if (isNumber(value)) {\n    date = new Date(+value);\n  } else {\n    date = new Date(value);\n  }\n  return date;\n}"
            },
            {
                "name": "customerEditRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/customer/customer-edit/customer-edit.routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  path: ':id',\n  component: CustomerEditComponent,\n  data: {},\n}"
            },
            {
                "name": "customerListingRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/customer/customer-listing/customer-listing.routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  path: '',\n  component: CustomerListingComponent,\n  data: {},\n}"
            },
            {
                "name": "customerRegistrationRouting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/customer/customer-registration/customer-registration.routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  path: 'novo',\n  component: CustomerRegistrationComponent,\n  data: {},\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'some text label:',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "DialogNegativeFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    textButtonOk: 'OK',\n    message: 'some negative feedback',\n    method: 'showNegativeFeedback',\n  },\n}"
            },
            {
                "name": "DialogPositiveFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    textButtonOk: 'OK',\n    message: 'some positive feedback',\n    method: 'showPositiveFeedback',\n  },\n}"
            },
            {
                "name": "DialogQuestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    textButtonOk: 'OK',\n    textButtonCancel: 'Cancel',\n    message: 'some question?',\n    method: 'showQuestion',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  baseUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "formatNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: number | string) =>\n  isNumber(value)\n    ? new Intl.NumberFormat('pt-br', { minimumFractionDigits: 2 }).format(value)\n    : value"
            },
            {
                "name": "innerId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "isKeyNotNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: unknown) => !isKeyNumber(value)"
            },
            {
                "name": "isKeyNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  value: unknown,\n): value is '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' =>\n  /^[0-9]*$/.test(`${value}`)"
            },
            {
                "name": "isNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/number.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: string | number): value is number =>\n  !isNaN(Number(value))"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Button',\n  component: ButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-button ${argsToTemplate(args)}>Button</app-button>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n  title: 'Input',\n  component: InputComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-input ${argsToTemplate(args)}></app-input>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LaunchDialogComponent>",
                "defaultValue": "{\n  title: 'Dialog',\n  component: LaunchDialogComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [CommonModule, DialogModule, ButtonModule],\n    }),\n  ],\n  render: (args: LaunchDialogComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `\n        <app-dialog></app-dialog>\n        <app-launcher ${argsToTemplate(args)}></app-launcher>\n    `,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HamburgerButtonComponent>",
                "defaultValue": "{\n  title: 'Hamburger Button',\n  component: HamburgerButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: HamburgerButtonComponent) => ({\n    props: {\n      ...args,\n      toggle: actionsData.toggle,\n    },\n    template: `<div style=\"position: relative;background-color: var(--color-brand-primary-darkest);height: 55px;width:75px\"><app-hamburger-button ${argsToTemplate(\n      args,\n    )}></app-hamburger-button></div>`,\n  }),\n}"
            },
            {
                "name": "navigateTo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helper/navigate.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  router: Router,\n  ...params: (string | number)[]\n): Observable<boolean> => {\n  const url = router.url.replace(/\\/[^/]*$/, '');\n  return from(router.navigate([url, ...params.filter((p) => p !== 'back')]));\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "PrimaryColumms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n  },\n}"
            },
            {
                "name": "PrimaryContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'primary',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "SecondaryColumms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n    name: 'secondary',\n  },\n}"
            },
            {
                "name": "SecondaryContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'secondary',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "InputType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"hidden\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"reset\" | \"search\" | \"submit\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
                "file": "src/app/components/input/input.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "src/app/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LaunchDialogComponent>",
                "file": "src/app/components/dialog/dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HamburgerButtonComponent>",
                "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/hamburger-button/hamburger-button.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  toggle: action('toggle'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HamburgerButtonComponent>",
                    "defaultValue": "{\n  title: 'Hamburger Button',\n  component: HamburgerButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: HamburgerButtonComponent) => ({\n    props: {\n      ...args,\n      toggle: actionsData.toggle,\n    },\n    template: `<div style=\"position: relative;background-color: var(--color-brand-primary-darkest);height: 55px;width:75px\"><app-hamburger-button ${argsToTemplate(\n      args,\n    )}></app-hamburger-button></div>`,\n  }),\n}"
                }
            ],
            "src/app/helper/date.helper.ts": [
                {
                    "name": "convertToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/date.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: string) => {\n  let date: Date | null = null;\n  if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}$/.test(value)) {\n    date = new Date(value.replace(/(\\d+[/])(\\d+[/])/, '$2$1'));\n  } else if (isNumber(value)) {\n    date = new Date(+value);\n  } else {\n    date = new Date(value);\n  }\n  return date;\n}"
                }
            ],
            "src/app/pages/customer/customer-edit/customer-edit.routing.ts": [
                {
                    "name": "customerEditRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/customer/customer-edit/customer-edit.routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  path: ':id',\n  component: CustomerEditComponent,\n  data: {},\n}"
                }
            ],
            "src/app/pages/customer/customer-listing/customer-listing.routing.ts": [
                {
                    "name": "customerListingRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/customer/customer-listing/customer-listing.routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  path: '',\n  component: CustomerListingComponent,\n  data: {},\n}"
                }
            ],
            "src/app/pages/customer/customer-registration/customer-registration.routing.ts": [
                {
                    "name": "customerRegistrationRouting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/customer/customer-registration/customer-registration.routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  path: 'novo',\n  component: CustomerRegistrationComponent,\n  data: {},\n}"
                }
            ],
            "src/app/components/input/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'some text label:',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n  title: 'Input',\n  component: InputComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: InputComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-input ${argsToTemplate(args)}></app-input>`,\n  }),\n}"
                }
            ],
            "src/app/components/dialog/dialog.stories.ts": [
                {
                    "name": "DialogNegativeFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    textButtonOk: 'OK',\n    message: 'some negative feedback',\n    method: 'showNegativeFeedback',\n  },\n}"
                },
                {
                    "name": "DialogPositiveFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    textButtonOk: 'OK',\n    message: 'some positive feedback',\n    method: 'showPositiveFeedback',\n  },\n}"
                },
                {
                    "name": "DialogQuestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    textButtonOk: 'OK',\n    textButtonCancel: 'Cancel',\n    message: 'some question?',\n    method: 'showQuestion',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LaunchDialogComponent>",
                    "defaultValue": "{\n  title: 'Dialog',\n  component: LaunchDialogComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [CommonModule, DialogModule, ButtonModule],\n    }),\n  ],\n  render: (args: LaunchDialogComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `\n        <app-dialog></app-dialog>\n        <app-launcher ${argsToTemplate(args)}></app-launcher>\n    `,\n  }),\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  baseUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/app/helper/number.helper.ts": [
                {
                    "name": "formatNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: number | string) =>\n  isNumber(value)\n    ? new Intl.NumberFormat('pt-br', { minimumFractionDigits: 2 }).format(value)\n    : value"
                },
                {
                    "name": "isKeyNotNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: unknown) => !isKeyNumber(value)"
                },
                {
                    "name": "isKeyNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  value: unknown,\n): value is '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' =>\n  /^[0-9]*$/.test(`${value}`)"
                },
                {
                    "name": "isNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/number.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: string | number): value is number =>\n  !isNaN(Number(value))"
                }
            ],
            "src/app/components/input/input.component.ts": [
                {
                    "name": "innerId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/input/input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Button',\n  component: ButtonComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: ButtonComponent) => ({\n    props: {\n      ...args,\n    },\n    template: `<app-button ${argsToTemplate(args)}>Button</app-button>`,\n  }),\n}"
                },
                {
                    "name": "PrimaryColumms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n  },\n}"
                },
                {
                    "name": "PrimaryContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'primary',\n  },\n}"
                },
                {
                    "name": "SecondaryColumms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'columms',\n    name: 'secondary',\n  },\n}"
                },
                {
                    "name": "SecondaryContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    isDisabled: false,\n    width: 'content',\n    type: 'button',\n    name: 'secondary',\n  },\n}"
                }
            ],
            "src/app/helper/navigate.helper.ts": [
                {
                    "name": "navigateTo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helper/navigate.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  router: Router,\n  ...params: (string | number)[]\n): Observable<boolean> => {\n  const url = router.url.replace(/\\/[^/]*$/, '');\n  return from(router.navigate([url, ...params.filter((p) => p !== 'back')]));\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/input/input.type.ts": [
                {
                    "name": "InputType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"checkbox\" | \"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"hidden\" | \"image\" | \"month\" | \"number\" | \"password\" | \"radio\" | \"range\" | \"reset\" | \"search\" | \"submit\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\"",
                    "file": "src/app/components/input/input.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/input/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "src/app/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/dialog/dialog.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LaunchDialogComponent>",
                    "file": "src/app/components/dialog/dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/hamburger-button/hamburger-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HamburgerButtonComponent>",
                    "file": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "clientes",
                        "loadChildren": "./pages/customer/customer.module#CustomerModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/customer/customer-routing.module.ts",
                                        "module": "CustomerRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "children": [
                                                    "customerListingRouting",
                                                    "customerRegistrationRouting",
                                                    "customerEditRouting",
                                                    {
                                                        "path": "",
                                                        "redirectTo": "",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CustomerModule"
                            }
                        ]
                    },
                    {
                        "path": "404",
                        "loadChildren": "./pages/not-found/not-found.module#NotFoundModule,"
                    },
                    {
                        "path": "",
                        "redirectTo": "clientes/novo",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "404"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryColumms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryColumms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "LaunchDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DialogNegativeFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DialogPositiveFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DialogQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dialog/dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HamburgerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/hamburger-button/hamburger-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/get-error-message.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetErrorMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "innerId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/cpf-mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CpfMaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/currency-mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CurrencyMaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/date-mask.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DateMaskDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/form.validation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormValidations",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/date.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "convertToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/navigate.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigateTo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formatNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isKeyNotNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isKeyNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/number.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/form.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/components/customer-form/customer-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/components/customer-table/customer-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-edit/customer-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-edit/customer-edit.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerEditRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-listing/customer-listing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerListingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-listing/customer-listing.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerListingRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-registration/customer-registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerRegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer-registration/customer-registration.routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerRegistrationRouting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/customer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomerService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/models/customer.data-form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomerDataForm",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/models/customer.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomerDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer/models/interfaces/customer.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICustomer",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/cpf.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CpfValidator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/date.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/name.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NameValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}